/*=========================================================================

  Program:   Visualization Toolkit
  Module:    $RCSfile: vtkMAFOrientationMarkerWidget.h,v $

  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
  All rights reserved.
  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.

     This software is distributed WITHOUT ANY WARRANTY; without even
     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
     PURPOSE.  See the above copyright notice for more information.

=========================================================================*/

#ifndef __vtkMAFOrientationMarkerWidget_h
#define __vtkMAFOrientationMarkerWidget_h

#include "vtkOrientationMarkerWidget.h"
#include "vtkMAFConfigure.h"

/**
Classname: vtkOrientationMarkerWidget - 2D widget for manipulating a marker prop

Ported from VTK 5 to MAF by Stefano Perticoni

This class is used along with vtkMAFAnnotatedCubeActor to build a render window superimposed rotating cube with
anatomical markers and it's working in a two layer maf render window ie the following render window should be created: 
m_Rwi = new mafRWI(mafGetFrame(), TWO_LAYER , ...);
 
Description:
This class provides support for interactively manipulating the position,
size, and apparent orientation of a prop that represents an orientation
marker.  This class works by adding its internal renderer to an external
"parent" renderer on a different layer.  The input orientation marker is
rendered as an overlay on the parent renderer and, thus, appears superposed
over all props in the parent's scene.  The camera view of the orientation
the marker is made to match that of the parent's by means of an observer
mechanism, giving the illusion that the orientation of the marker reflects
that of the prop(s) in the parent's scene.

The widget listens to left mouse button and mouse movement events. It will
change the cursor shape based on its location. If the cursor is over the
overlay renderer, it will change the cursor shape to a SIZEALL shape
or to a resize corner shape (e.g., SIZENW) if the cursor is near a corner.
If the left mouse button is pressed and held down while moving, the overlay
renderer, and hence, the orientation marker, is resized or moved.  I the case
of a resize operation, releasing the left mouse button causes the widget
to enforce its renderer to be square.  The diagonally opposite corner to the
one moved is repositioned such that all edges of the renderer have the same
length: the minimum.

To use this object, there are two key steps: 1) invoke SetInteractor() with
the argument of the method a vtkRenderWindowInteractor, and 2) invoke
SetOrientationMarker with an instance of vtkProp (see caveats below).
Specifically, vtkAxesActor and vtkAnnotatedCubeActor are two classes
designed to work with this class.  A composite orientation marker can be
generated by adding instances of vtkAxesActor and vtkAnnotatedCubeActor to a
vtkPropAssembly, which can then be set as the input orientation marker.
The widget can be also be set up in a non-interactive fashion by setting
Ineractive to Off and sizing/placing the overlay renderer in its parent
renderer by calling the widget's SetViewport method.

Thanks:
This class was based originally on Paraview's vtkPVAxesWidget.

Caveats:
The input orientation marker prop should calculate its bounds as though they
are symmetric about it's origin.  This must currently be done to correctly
implement the camera synchronization between the ivar renderer and the
renderer associated with the set interactor.  Importantly, the InteractorStyle
associated with the interactor must be of the type vtkInteractorStyle*Camera.
Where desirable, the parent renderer should be set by the SetDefaultRenderer
method.  The parent renderer's number of layers is modified if required.

See Also:
vtkInteractorObserver vtkXYPlotWidget vtkScalarBarWidget vtkAxesActor
vtkAnnotatedCubeActor

*/
class VTK_vtkMAF_EXPORT vtkMAFOrientationMarkerWidget : public vtkOrientationMarkerWidget
{
public:
  static vtkMAFOrientationMarkerWidget* New();
  vtkTypeRevisionMacro(vtkMAFOrientationMarkerWidget, vtkOrientationMarkerWidget);

protected:
  vtkMAFOrientationMarkerWidget();
  ~vtkMAFOrientationMarkerWidget();

private:
  vtkMAFOrientationMarkerWidget(const vtkMAFOrientationMarkerWidget&);  // Not implemented
  void operator=(const vtkMAFOrientationMarkerWidget&);  // Not implemented
};

#endif