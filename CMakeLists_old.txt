#
# Program:   MULTIMOD APPLICATION FRAMEWORK (MAF)
# Module:    $RCSfile: CMakeLists_old.txt,v $
# Language:  CMake 2.0
# Date:      $Date: 2004-10-18 07:37:33 $
# Version:   $Revision: 1.1 $
#
# Description:
# CMake Project file for the MAF.

#MESSAGE("MAF:SOF")
#Macro that helps in printing debug messages


SET (CMAKE_BACKWARDS_COMPATIBILITY "2.0" CACHE INSTERNAL "This project is for CMake 2.0")
CMAKE_MINIMUM_REQUIRED(VERSION 2.0) 
PROJECT (MAF)

INCLUDE (${MAF_SOURCE_DIR}/modules/DebugMacro.cmake)

SET (LIBRARY_OUTPUT_PATH ${MAF_BINARY_DIR}/bin/ CACHE INTERNAL
     "Single output directory for building all libraries.")

SET (EXECUTABLE_OUTPUT_PATH ${MAF_BINARY_DIR}/bin/ CACHE INTERNAL 
     "Single output directory for building all executables.")

MARK_AS_ADVANCED (
  LIBRARY_OUTPUT_PATH 
  EXECUTABLE_OUTPUT_PATH
)

# this is to enable precompiled headers under VC6.0
IF(WIN32)
  IF (NOT UNIX)
      SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /YX" CACHE STRING "Compiler flags")
  ENDIF (NOT UNIX)
ENDIF(WIN32)

#
# Options
#
OPTION(BUILD_SHARED_LIBS "Build with shared libraries." 0 )
OPTION(BUILD_EXAMPLES "Build examples." OFF )
OPTION(BUILD_TESTING "Build the testing tree." OFF)
OPTION(BUILD_MAF_DOCUMENTATION 0)

# Check if MFL is inside MAF tree.
IF (EXISTS "${MAF_SOURCE_DIR}/mfl")

  # If MFL is inside MAF tree first build MFL and then build the MAF.
  #MESSAGE(STATUS "MAF: Configuring MFL")
  SUBDIRS (mfl)
  
  IF (EXISTS "${MAF_BINARY_DIR}/mfl/UseMFL.cmake")
    # this is just to a new red voice and force CMake to disable OK button
    FIND_FILE (USE_MFL_FILE UseMFL.cmake "${MAF_BINARY_DIR}/mfl") 
  
    MESSAGE("MAF: Configured & Using MFL")
    INCLUDE (${USE_MFL_FILE})
    SET (MAF_CAN_BUILD 1)
        
  ENDIF (EXISTS "${MAF_BINARY_DIR}/mfl/UseMFL.cmake")
ELSE (EXISTS "${MAF_SOURCE_DIR}/mfl")
  # search for MFL outside the MAF tree: MFL must be already built!
  MESSAGE("MAF: Searching for MFL")
  INCLUDE (${MAF_SOURCE_DIR}/modules/FindMFL.cmake)
  IF (MFL_FOUND)
    MESSAGE(STATUS "MAF: Found & Using MFL")
    ##MM: come fa ad avere la variabile USE_MFL_FILE che e' nell'altro albero dell'IF???
    INCLUDE (${USE_MFL_FILE})
    # Here, in case MFL has been built as dynamic libs, should be added 
    # an option to ask if to copy all dynamic libs to the MAF dir. 
    ##MM????? non ho mica capito!!!
    SET (MAF_CAN_BUILD 1)
  ENDIF (MFL_FOUND)
ENDIF (EXISTS "${MAF_SOURCE_DIR}/mfl")

IF (MAF_CAN_BUILD)
  # Add single dirs to inclusion path
  INCLUDE_DIRECTORIES(${MAF_BINARY_DIR})
  INCLUDE_DIRECTORIES(${MAF_BINARY_DIR}/Core)
  
  MESSAGE("MAF: Configuring the MAF Kits")
  SUBDIRS (Core)
  SUBDIRS (vtkMAF)
  #
  # Build examples too ?
  #
  IF (BUILD_EXAMPLES AND MFL_CONFIGURED)
    SUBDIRS(Examples)
  ENDIF (BUILD_EXAMPLES AND MFL_CONFIGURED)
  
  
  # Testing stuff
  IF(BUILD_TESTING)
    INCLUDE (${CMAKE_ROOT}/Modules/Dart.cmake)
    ENABLE_TESTING()
  
    INCLUDE (${CMAKE_ROOT}/Modules/Dart.cmake)
    
    # where will executable tests be written ?
    IF (EXECUTABLE_OUTPUT_PATH)
        SET (CXX_TEST_PATH ${EXECUTABLE_OUTPUT_PATH})
    ELSE (EXECUTABLE_OUTPUT_PATH)
        SET (CXX_TEST_PATH .)
    ENDIF (EXECUTABLE_OUTPUT_PATH)
    
    IF (WIN32)
      FIND_PROGRAM (PKZIP_COMMAND pkzipc.exe "c:/program files/pkware/pkzipc" "c:/programmi/pkware/pkzipc" DOC "Utility used for packing ditribution files")
      SET(PACKAGES_OUTPUT_PATH "c:/temp" CACHE PATH "Path for distribution zip files" )
      CONFIGURE_FILE(${MAF_SOURCE_DIR}/RunDart.tcl.in ${MAF_SOURCE_DIR}/RunDart.tcl @ONLY)
    ENDIF (WIN32)
    
  ENDIF(BUILD_TESTING)
ENDIF (MAF_CAN_BUILD)



#MARK_AS_ADVANCED(
#   USE_MFL_FILE
#)


#Write the list of variables and their values that are defined by CMake when running this CMakeList file
FILE(WRITE ${CMAKE_CURRENT_BINARY_DIR}/AllVariables.txt "")
GET_CMAKE_PROPERTY(VARS VARIABLES)
FOREACH(var ${VARS})
	FILE(APPEND ${CMAKE_CURRENT_BINARY_DIR}/AllVariables.txt 
							"${var} \"${${var}}\"\n")
ENDFOREACH(var ${VARS})

