/*=========================================================================
  Program:   Multimod Application Framework
  Module:    $RCSfile: mafEventBase.cpp,v $
  Language:  C++
  Date:      $Date: 2005-04-28 16:11:47 $
  Version:   $Revision: 1.4 $
  Authors:   Marco Petrone
==========================================================================
  Copyright (c) 2001/2005 
  CINECA - Interuniversity Consortium (www.cineca.it)
=========================================================================*/


#include "mafDefines.h" 
//----------------------------------------------------------------------------
// NOTE: Every CPP file in the MAF must include "mafDefines.h" as first.
// This force to include Window,wxWidgets and VTK exactly in this order.
// Failing in doing this will result in a run-time error saying:
// "Failure#0: The value of ESP was not properly saved across a function call"
//----------------------------------------------------------------------------


#include "mafEventBase.h"

//------------------------------------------------------------------------------
mafCxxTypeMacro(mafEventBase)
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
mafEventBase::mafEventBase(void *sender, mafID id, void *data, mafID channel):
m_Sender(sender),m_Source(NULL),m_Data(data),m_Id(id),m_Channel(channel),m_SkipFlag(false)
//------------------------------------------------------------------------------
{}

//------------------------------------------------------------------------------
mafEventBase::~mafEventBase()
//------------------------------------------------------------------------------
{
}

//------------------------------------------------------------------------------
void mafEventBase::DeepCopy(const mafEventBase *event)
//------------------------------------------------------------------------------
{
  m_Sender    = event->m_Sender;
  m_Source    = event->m_Source;
  m_Data      = event->m_Data;
  m_Id        = event->m_Id;
  m_SkipFlag  = event->m_SkipFlag;
}

//------------------------------------------------------------------------------
mafEventBase::mafEventBase(const mafEventBase& c)
//------------------------------------------------------------------------------
{
  DeepCopy(&c);
}
//------------------------------------------------------------------------------
void mafEventBase::SetSender(void *sender)
//------------------------------------------------------------------------------
{
  m_Sender = sender;
}
//------------------------------------------------------------------------------
void *mafEventBase::GetSender()
//------------------------------------------------------------------------------
{
  return m_Sender;
}

//------------------------------------------------------------------------------
void mafEventBase::SetSource(mafEventSource *src)
//------------------------------------------------------------------------------
{
  m_Source=src;
}

//------------------------------------------------------------------------------
mafEventSource *mafEventBase::GetSource()
//------------------------------------------------------------------------------
{
  return m_Source;
}

//------------------------------------------------------------------------------
void mafEventBase::SetData(void *calldata)
//------------------------------------------------------------------------------
{
  m_Data = calldata;
}

//------------------------------------------------------------------------------
void *mafEventBase::GetData()
//------------------------------------------------------------------------------
{
  return m_Data;
}

//------------------------------------------------------------------------------
void mafEventBase::SetId(mafID id)
//------------------------------------------------------------------------------
{
  m_Id = id;
}
//------------------------------------------------------------------------------
mafID mafEventBase::GetId()
//------------------------------------------------------------------------------
{
  return m_Id;
}

//------------------------------------------------------------------------------
bool mafEventBase::GetSkipFlag()
//------------------------------------------------------------------------------
{
  return m_SkipFlag;
}

//------------------------------------------------------------------------------
void mafEventBase::SetSkipFlag(bool flag)
//------------------------------------------------------------------------------
{
  m_SkipFlag=flag;
}

//------------------------------------------------------------------------------
void mafEventBase::SkipNext()
//------------------------------------------------------------------------------
{
  m_SkipFlag=true;
}

//------------------------------------------------------------------------------
mafID mafEventBase::GetChannel()
//------------------------------------------------------------------------------
{
  return m_Channel;
}
  
//------------------------------------------------------------------------------
void mafEventBase::SetChannel(mafID channel)
//------------------------------------------------------------------------------
{
  m_Channel=channel;
}
