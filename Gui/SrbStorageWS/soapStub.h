/* soapStub.h
   Generated by gSOAP 2.7.9b from SrbStorageWS.h
   Copyright(C) 2000-2006, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/




#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (7)
/* Base64 schema type: */
class SOAP_CMAC xsd__base64Binary
{
public:
	unsigned char *__ptr;
	int __size;
	char *id;	/* optional element of type xsd:string */
	char *type;	/* optional element of type xsd:string */
	char *options;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 7; } /* = unique id SOAP_TYPE_xsd__base64Binary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__base64Binary() : __ptr(NULL), id(NULL), type(NULL), options(NULL), soap(NULL) { }
	virtual ~xsd__base64Binary() { }
};
#endif

#ifndef SOAP_TYPE_xsd__hexBinary
#define SOAP_TYPE_xsd__hexBinary (13)
/* hexBinary schema type: */
class SOAP_CMAC xsd__hexBinary
{
public:
	unsigned char *__ptr;
	int __size;
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE_xsd__hexBinary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__hexBinary() : __ptr(NULL) { }
	virtual ~xsd__hexBinary() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SrbAuth
#define SOAP_TYPE_ns1__SrbAuth (14)
/* ns1:SrbAuth */
class SOAP_CMAC ns1__SrbAuth
{
public:
	char *host;	/* optional element of type xsd:string */
	char *port;	/* optional element of type xsd:string */
	char *pwd;	/* optional element of type xsd:string */
	char *user;	/* optional element of type xsd:string */
	char *domain;	/* optional element of type xsd:string */
	char *auth_scheme;	/* optional element of type xsd:string */
	char *server_dn;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE_ns1__SrbAuth */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SrbAuth() : host(NULL), port(NULL), pwd(NULL), user(NULL), domain(NULL), auth_scheme(NULL), server_dn(NULL), soap(NULL) { }
	virtual ~ns1__SrbAuth() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SrbList
#define SOAP_TYPE__ns1__SrbList (15)
/* ns1:SrbList */
class SOAP_CMAC _ns1__SrbList
{
public:
	ns1__SrbAuth *srbAuth;	/* optional element of type ns1:SrbAuth */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE__ns1__SrbList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SrbList() : srbAuth(NULL), soap(NULL) { }
	virtual ~_ns1__SrbList() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SrbListResponse
#define SOAP_TYPE__ns1__SrbListResponse (16)
/* ns1:SrbListResponse */
class SOAP_CMAC _ns1__SrbListResponse
{
public:
	char *filelist;	/* RPC return element */	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE__ns1__SrbListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SrbListResponse() : filelist(NULL), soap(NULL) { }
	virtual ~_ns1__SrbListResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns2__SrbAuth
#define SOAP_TYPE_ns2__SrbAuth (17)
/* ns2:SrbAuth */
class SOAP_CMAC ns2__SrbAuth
{
public:
	char *host;	/* optional element of type xsd:string */
	char *port;	/* optional element of type xsd:string */
	char *pwd;	/* optional element of type xsd:string */
	char *user;	/* optional element of type xsd:string */
	char *domain;	/* optional element of type xsd:string */
	char *auth_scheme;	/* optional element of type xsd:string */
	char *server_dn;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 17; } /* = unique id SOAP_TYPE_ns2__SrbAuth */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__SrbAuth() : host(NULL), port(NULL), pwd(NULL), user(NULL), domain(NULL), auth_scheme(NULL), server_dn(NULL), soap(NULL) { }
	virtual ~ns2__SrbAuth() { }
};
#endif

#ifndef SOAP_TYPE__ns2__SrbDownload
#define SOAP_TYPE__ns2__SrbDownload (18)
/* ns2:SrbDownload */
class SOAP_CMAC _ns2__SrbDownload
{
public:
	ns2__SrbAuth *srbAuth;	/* optional element of type ns2:SrbAuth */
	char *srbFileName;	/* optional element of type xsd:string */
	char *srbPath;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 18; } /* = unique id SOAP_TYPE__ns2__SrbDownload */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns2__SrbDownload() : srbAuth(NULL), srbFileName(NULL), srbPath(NULL), soap(NULL) { }
	virtual ~_ns2__SrbDownload() { }
};
#endif

#ifndef SOAP_TYPE__ns2__myData
#define SOAP_TYPE__ns2__myData (19)
/* ns2:myData */
class SOAP_CMAC _ns2__myData
{
public:
	class ns3__Include *ns3__Include_;	/* required element of type ns3:Include */
	char *ns4__contentType;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 19; } /* = unique id SOAP_TYPE__ns2__myData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns2__myData() : ns3__Include_(NULL), ns4__contentType(NULL), soap(NULL) { }
	virtual ~_ns2__myData() { }
};
#endif

#ifndef SOAP_TYPE_ns3__Include
#define SOAP_TYPE_ns3__Include (20)
/* ns3:Include */
class SOAP_CMAC ns3__Include
{
public:
	int __size;	/* sequence of elements <-any> */
	char **__any;
	char *href;	/* required attribute */
	char *__anyAttribute;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 20; } /* = unique id SOAP_TYPE_ns3__Include */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__Include() : __any(NULL), href(NULL), __anyAttribute(NULL), soap(NULL) { }
	virtual ~ns3__Include() { }
};
#endif

#ifndef SOAP_TYPE_ns5__SrbAuth
#define SOAP_TYPE_ns5__SrbAuth (23)
/* ns5:SrbAuth */
class SOAP_CMAC ns5__SrbAuth
{
public:
	char *host;	/* optional element of type xsd:string */
	char *port;	/* optional element of type xsd:string */
	char *pwd;	/* optional element of type xsd:string */
	char *user;	/* optional element of type xsd:string */
	char *domain;	/* optional element of type xsd:string */
	char *auth_scheme;	/* optional element of type xsd:string */
	char *server_dn;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 23; } /* = unique id SOAP_TYPE_ns5__SrbAuth */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__SrbAuth() : host(NULL), port(NULL), pwd(NULL), user(NULL), domain(NULL), auth_scheme(NULL), server_dn(NULL), soap(NULL) { }
	virtual ~ns5__SrbAuth() { }
};
#endif

#ifndef SOAP_TYPE_ns5__myData
#define SOAP_TYPE_ns5__myData (24)
/* ns5:myData */
class SOAP_CMAC ns5__myData
{
public:
	ns3__Include *ns3__Include_;	/* required element of type ns3:Include */
	char *ns4__contentType;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 24; } /* = unique id SOAP_TYPE_ns5__myData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__myData() : ns3__Include_(NULL), ns4__contentType(NULL), soap(NULL) { }
	virtual ~ns5__myData() { }
};
#endif

#ifndef SOAP_TYPE__ns5__SrbUpload
#define SOAP_TYPE__ns5__SrbUpload (25)
/* ns5:SrbUpload */
class SOAP_CMAC _ns5__SrbUpload
{
public:
	ns5__SrbAuth *srbAuth;	/* optional element of type ns5:SrbAuth */
	ns5__myData *fileData;	/* optional element of type ns5:myData */
	char *srbPath;	/* optional element of type xsd:string */
	char *fileName;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 25; } /* = unique id SOAP_TYPE__ns5__SrbUpload */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__SrbUpload() : srbAuth(NULL), fileData(NULL), srbPath(NULL), fileName(NULL), soap(NULL) { }
	virtual ~_ns5__SrbUpload() { }
};
#endif

#ifndef SOAP_TYPE__ns5__fileInfo
#define SOAP_TYPE__ns5__fileInfo (26)
/* ns5:fileInfo */
class SOAP_CMAC _ns5__fileInfo
{
public:
	int chksum;	/* required element of type xsd:int */
	char *uriFile;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 26; } /* = unique id SOAP_TYPE__ns5__fileInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__fileInfo() : uriFile(NULL), soap(NULL) { }
	virtual ~_ns5__fileInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns4__base64Binary
#define SOAP_TYPE_ns4__base64Binary (21)
/* Primitive ns4:base64Binary schema type: */
class SOAP_CMAC ns4__base64Binary
{
public:
	xsd__base64Binary __item;
	char *contentType;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 21; } /* = unique id SOAP_TYPE_ns4__base64Binary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__base64Binary() : contentType(NULL), soap(NULL) { }
	virtual ~ns4__base64Binary() { }
};
#endif

#ifndef SOAP_TYPE_ns4__hexBinary
#define SOAP_TYPE_ns4__hexBinary (22)
/* Primitive ns4:hexBinary schema type: */
class SOAP_CMAC ns4__hexBinary
{
public:
	xsd__hexBinary __item;
	char *contentType;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 22; } /* = unique id SOAP_TYPE_ns4__hexBinary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__hexBinary() : contentType(NULL), soap(NULL) { }
	virtual ~ns4__hexBinary() { }
};
#endif

#ifndef SOAP_TYPE___ns6__SrbList
#define SOAP_TYPE___ns6__SrbList (36)
/* Operation wrapper: */
struct __ns6__SrbList
{
public:
	_ns1__SrbList *ns1__SrbList;	/* optional element of type ns1:SrbList */
};
#endif

#ifndef SOAP_TYPE___ns7__SrbDownloadResponse
#define SOAP_TYPE___ns7__SrbDownloadResponse (37)
/* Operation wrapper: */
struct __ns7__SrbDownloadResponse
{
public:
	_ns2__myData *ns2__myData;	/* RPC return element */	/* optional element of type ns2:myData */
};
#endif

#ifndef SOAP_TYPE___ns7__SrbDownload
#define SOAP_TYPE___ns7__SrbDownload (42)
/* Operation wrapper: */
struct __ns7__SrbDownload
{
public:
	_ns2__SrbDownload *ns2__SrbDownload;	/* optional element of type ns2:SrbDownload */
};
#endif

#ifndef SOAP_TYPE___ns8__SrbUploadResponse
#define SOAP_TYPE___ns8__SrbUploadResponse (43)
/* Operation wrapper: */
struct __ns8__SrbUploadResponse
{
public:
	_ns5__fileInfo *ns5__fileInfo;	/* RPC return element */	/* optional element of type ns5:fileInfo */
};
#endif

#ifndef SOAP_TYPE___ns8__SrbUpload
#define SOAP_TYPE___ns8__SrbUpload (48)
/* Operation wrapper: */
struct __ns8__SrbUpload
{
public:
	_ns5__SrbUpload *ns5__SrbUpload;	/* optional element of type ns5:SrbUpload */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (51)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	void *dummy;	/* transient */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (52)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (54)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (55)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (56)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (4)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE_xsd__anyURI
#define SOAP_TYPE_xsd__anyURI (6)
typedef char *xsd__anyURI;
#endif


/******************************************************************************\
 *                                                                            *
 * Typedef Synonyms                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Stubs                                                                      *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns6__SrbList(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__SrbList *ns1__SrbList, _ns1__SrbListResponse *ns1__SrbListResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns7__SrbDownload(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns2__SrbDownload *ns2__SrbDownload, struct __ns7__SrbDownloadResponse &_param_1);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns8__SrbUpload(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns5__SrbUpload *ns5__SrbUpload, struct __ns8__SrbUploadResponse &_param_2);

#endif

/* End of soapStub.h */
