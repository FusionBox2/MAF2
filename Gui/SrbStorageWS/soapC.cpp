/* soapC.cpp
   Generated by gSOAP 2.7.9b from SrbStorageWS.h
   Copyright(C) 2000-2006, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.7.9b 2007-08-24 10:29:35 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL);
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = (struct SOAP_ENV__Fault*)soap_malloc(soap, sizeof(struct SOAP_ENV__Fault));
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = (struct SOAP_ENV__Code*)soap_malloc(soap, sizeof(struct SOAP_ENV__Code));
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = (struct SOAP_ENV__Reason*)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason));
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = (struct SOAP_ENV__Code*)soap_malloc(soap, sizeof(struct SOAP_ENV__Code));
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	for (;;)
		if (!soap_getelement(soap, &t))
			if (soap->error || soap_ignore_element(soap))
				break;
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_unsignedByte:
		return soap_in_unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_ns5__myData:
		return soap_in_ns5__myData(soap, NULL, NULL, "ns5:myData");
	case SOAP_TYPE_ns5__SrbAuth:
		return soap_in_ns5__SrbAuth(soap, NULL, NULL, "ns5:SrbAuth");
	case SOAP_TYPE_ns4__hexBinary:
		return soap_in_ns4__hexBinary(soap, NULL, NULL, "ns4:hexBinary");
	case SOAP_TYPE_ns4__base64Binary:
		return soap_in_ns4__base64Binary(soap, NULL, NULL, "ns4:base64Binary");
	case SOAP_TYPE_ns3__Include:
		return soap_in_ns3__Include(soap, NULL, NULL, "ns3:Include");
	case SOAP_TYPE_ns2__SrbAuth:
		return soap_in_ns2__SrbAuth(soap, NULL, NULL, "ns2:SrbAuth");
	case SOAP_TYPE_ns1__SrbAuth:
		return soap_in_ns1__SrbAuth(soap, NULL, NULL, "ns1:SrbAuth");
	case SOAP_TYPE_xsd__hexBinary:
		return soap_in_xsd__hexBinary(soap, NULL, NULL, "xsd:hexBinary");
	case SOAP_TYPE_xsd__base64Binary:
		return soap_in_xsd__base64Binary(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_PointerTo_ns5__SrbUpload:
		return soap_in_PointerTo_ns5__SrbUpload(soap, NULL, NULL, "ns5:SrbUpload");
	case SOAP_TYPE_PointerTo_ns5__fileInfo:
		return soap_in_PointerTo_ns5__fileInfo(soap, NULL, NULL, "ns5:fileInfo");
	case SOAP_TYPE_PointerTo_ns2__SrbDownload:
		return soap_in_PointerTo_ns2__SrbDownload(soap, NULL, NULL, "ns2:SrbDownload");
	case SOAP_TYPE_PointerTo_ns2__myData:
		return soap_in_PointerTo_ns2__myData(soap, NULL, NULL, "ns2:myData");
	case SOAP_TYPE_PointerTo_ns1__SrbListResponse:
		return soap_in_PointerTo_ns1__SrbListResponse(soap, NULL, NULL, "ns1:SrbListResponse");
	case SOAP_TYPE_PointerTo_ns1__SrbList:
		return soap_in_PointerTo_ns1__SrbList(soap, NULL, NULL, "ns1:SrbList");
	case SOAP_TYPE_PointerTons5__myData:
		return soap_in_PointerTons5__myData(soap, NULL, NULL, "ns5:myData");
	case SOAP_TYPE_PointerTons5__SrbAuth:
		return soap_in_PointerTons5__SrbAuth(soap, NULL, NULL, "ns5:SrbAuth");
	case SOAP_TYPE_PointerTons3__Include:
		return soap_in_PointerTons3__Include(soap, NULL, NULL, "ns3:Include");
	case SOAP_TYPE_PointerTons2__SrbAuth:
		return soap_in_PointerTons2__SrbAuth(soap, NULL, NULL, "ns2:SrbAuth");
	case SOAP_TYPE_PointerTons1__SrbAuth:
		return soap_in_PointerTons1__SrbAuth(soap, NULL, NULL, "ns1:SrbAuth");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_in_PointerTounsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_xsd__anyURI:
	{	char **s;
		s = soap_in_xsd__anyURI(soap, NULL, NULL, "xsd:anyURI");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_unsignedByte;
			return soap_in_unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns5:myData"))
		{	*type = SOAP_TYPE_ns5__myData;
			return soap_in_ns5__myData(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns5:SrbAuth"))
		{	*type = SOAP_TYPE_ns5__SrbAuth;
			return soap_in_ns5__SrbAuth(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns4:hexBinary"))
		{	*type = SOAP_TYPE_ns4__hexBinary;
			return soap_in_ns4__hexBinary(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns4:base64Binary"))
		{	*type = SOAP_TYPE_ns4__base64Binary;
			return soap_in_ns4__base64Binary(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:Include"))
		{	*type = SOAP_TYPE_ns3__Include;
			return soap_in_ns3__Include(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:SrbAuth"))
		{	*type = SOAP_TYPE_ns2__SrbAuth;
			return soap_in_ns2__SrbAuth(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SrbAuth"))
		{	*type = SOAP_TYPE_ns1__SrbAuth;
			return soap_in_ns1__SrbAuth(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:hexBinary"))
		{	*type = SOAP_TYPE_xsd__hexBinary;
			return soap_in_xsd__hexBinary(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:base64Binary"))
		{	*type = SOAP_TYPE_xsd__base64Binary;
			return soap_in_xsd__base64Binary(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:anyURI"))
		{	char **s;
			*type = SOAP_TYPE_xsd__anyURI;
			s = soap_in_xsd__anyURI(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns5:fileInfo"))
		{	*type = SOAP_TYPE__ns5__fileInfo;
			return soap_in__ns5__fileInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns5:SrbUpload"))
		{	*type = SOAP_TYPE__ns5__SrbUpload;
			return soap_in__ns5__SrbUpload(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:myData"))
		{	*type = SOAP_TYPE__ns2__myData;
			return soap_in__ns2__myData(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:SrbDownload"))
		{	*type = SOAP_TYPE__ns2__SrbDownload;
			return soap_in__ns2__SrbDownload(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SrbListResponse"))
		{	*type = SOAP_TYPE__ns1__SrbListResponse;
			return soap_in__ns1__SrbListResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SrbList"))
		{	*type = SOAP_TYPE__ns1__SrbList;
			return soap_in__ns1__SrbList(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unknown element '%s' (level=%u, %d)\n", soap->tag, soap->level, soap->body));
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_unsignedByte:
		return soap_out_unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE__ns5__fileInfo:
		return ((_ns5__fileInfo *)ptr)->soap_out(soap, "ns5:fileInfo", id, NULL);
	case SOAP_TYPE__ns5__SrbUpload:
		return ((_ns5__SrbUpload *)ptr)->soap_out(soap, "ns5:SrbUpload", id, NULL);
	case SOAP_TYPE_ns5__myData:
		return ((ns5__myData *)ptr)->soap_out(soap, tag, id, "ns5:myData");
	case SOAP_TYPE_ns5__SrbAuth:
		return ((ns5__SrbAuth *)ptr)->soap_out(soap, tag, id, "ns5:SrbAuth");
	case SOAP_TYPE_ns4__hexBinary:
		return ((ns4__hexBinary *)ptr)->soap_out(soap, tag, id, "ns4:hexBinary");
	case SOAP_TYPE_ns4__base64Binary:
		return ((ns4__base64Binary *)ptr)->soap_out(soap, tag, id, "ns4:base64Binary");
	case SOAP_TYPE_ns3__Include:
		return ((ns3__Include *)ptr)->soap_out(soap, tag, id, "ns3:Include");
	case SOAP_TYPE__ns2__myData:
		return ((_ns2__myData *)ptr)->soap_out(soap, "ns2:myData", id, NULL);
	case SOAP_TYPE__ns2__SrbDownload:
		return ((_ns2__SrbDownload *)ptr)->soap_out(soap, "ns2:SrbDownload", id, NULL);
	case SOAP_TYPE_ns2__SrbAuth:
		return ((ns2__SrbAuth *)ptr)->soap_out(soap, tag, id, "ns2:SrbAuth");
	case SOAP_TYPE__ns1__SrbListResponse:
		return ((_ns1__SrbListResponse *)ptr)->soap_out(soap, "ns1:SrbListResponse", id, NULL);
	case SOAP_TYPE__ns1__SrbList:
		return ((_ns1__SrbList *)ptr)->soap_out(soap, "ns1:SrbList", id, NULL);
	case SOAP_TYPE_ns1__SrbAuth:
		return ((ns1__SrbAuth *)ptr)->soap_out(soap, tag, id, "ns1:SrbAuth");
	case SOAP_TYPE_xsd__hexBinary:
		return ((xsd__hexBinary *)ptr)->soap_out(soap, tag, id, "xsd:hexBinary");
	case SOAP_TYPE_xsd__base64Binary:
		return ((xsd__base64Binary *)ptr)->soap_out(soap, tag, id, "xsd:base64Binary");
	case SOAP_TYPE_PointerTo_ns5__SrbUpload:
		return soap_out_PointerTo_ns5__SrbUpload(soap, tag, id, (_ns5__SrbUpload *const*)ptr, "ns5:SrbUpload");
	case SOAP_TYPE_PointerTo_ns5__fileInfo:
		return soap_out_PointerTo_ns5__fileInfo(soap, tag, id, (_ns5__fileInfo *const*)ptr, "ns5:fileInfo");
	case SOAP_TYPE_PointerTo_ns2__SrbDownload:
		return soap_out_PointerTo_ns2__SrbDownload(soap, tag, id, (_ns2__SrbDownload *const*)ptr, "ns2:SrbDownload");
	case SOAP_TYPE_PointerTo_ns2__myData:
		return soap_out_PointerTo_ns2__myData(soap, tag, id, (_ns2__myData *const*)ptr, "ns2:myData");
	case SOAP_TYPE_PointerTo_ns1__SrbListResponse:
		return soap_out_PointerTo_ns1__SrbListResponse(soap, tag, id, (_ns1__SrbListResponse *const*)ptr, "ns1:SrbListResponse");
	case SOAP_TYPE_PointerTo_ns1__SrbList:
		return soap_out_PointerTo_ns1__SrbList(soap, tag, id, (_ns1__SrbList *const*)ptr, "ns1:SrbList");
	case SOAP_TYPE_PointerTons5__myData:
		return soap_out_PointerTons5__myData(soap, tag, id, (ns5__myData *const*)ptr, "ns5:myData");
	case SOAP_TYPE_PointerTons5__SrbAuth:
		return soap_out_PointerTons5__SrbAuth(soap, tag, id, (ns5__SrbAuth *const*)ptr, "ns5:SrbAuth");
	case SOAP_TYPE_PointerTons3__Include:
		return soap_out_PointerTons3__Include(soap, tag, id, (ns3__Include *const*)ptr, "ns3:Include");
	case SOAP_TYPE_PointerTons2__SrbAuth:
		return soap_out_PointerTons2__SrbAuth(soap, tag, id, (ns2__SrbAuth *const*)ptr, "ns2:SrbAuth");
	case SOAP_TYPE_PointerTons1__SrbAuth:
		return soap_out_PointerTons1__SrbAuth(soap, tag, id, (ns1__SrbAuth *const*)ptr, "ns1:SrbAuth");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_out_PointerTounsignedByte(soap, tag, id, (unsigned char *const*)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_xsd__anyURI:
		return soap_out_string(soap, tag, id, (char**)&ptr, "xsd:anyURI");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, "xsd:QName", id, (char**)&ptr, NULL);
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char**)&ptr, "xsd:string");
	}
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE__ns5__fileInfo:
		((_ns5__fileInfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns5__SrbUpload:
		((_ns5__SrbUpload *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns5__myData:
		((ns5__myData *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns5__SrbAuth:
		((ns5__SrbAuth *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns4__hexBinary:
		((ns4__hexBinary *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns4__base64Binary:
		((ns4__base64Binary *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__Include:
		((ns3__Include *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns2__myData:
		((_ns2__myData *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns2__SrbDownload:
		((_ns2__SrbDownload *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns2__SrbAuth:
		((ns2__SrbAuth *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SrbListResponse:
		((_ns1__SrbListResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SrbList:
		((_ns1__SrbList *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__SrbAuth:
		((ns1__SrbAuth *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__hexBinary:
		((xsd__hexBinary *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__base64Binary:
		((xsd__base64Binary *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___ns8__SrbUpload:
		soap_serialize___ns8__SrbUpload(soap, (const struct __ns8__SrbUpload *)ptr);
		break;
	case SOAP_TYPE___ns8__SrbUploadResponse:
		soap_serialize___ns8__SrbUploadResponse(soap, (const struct __ns8__SrbUploadResponse *)ptr);
		break;
	case SOAP_TYPE___ns7__SrbDownload:
		soap_serialize___ns7__SrbDownload(soap, (const struct __ns7__SrbDownload *)ptr);
		break;
	case SOAP_TYPE___ns7__SrbDownloadResponse:
		soap_serialize___ns7__SrbDownloadResponse(soap, (const struct __ns7__SrbDownloadResponse *)ptr);
		break;
	case SOAP_TYPE___ns6__SrbList:
		soap_serialize___ns6__SrbList(soap, (const struct __ns6__SrbList *)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns5__SrbUpload:
		soap_serialize_PointerTo_ns5__SrbUpload(soap, (_ns5__SrbUpload *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns5__fileInfo:
		soap_serialize_PointerTo_ns5__fileInfo(soap, (_ns5__fileInfo *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns2__SrbDownload:
		soap_serialize_PointerTo_ns2__SrbDownload(soap, (_ns2__SrbDownload *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns2__myData:
		soap_serialize_PointerTo_ns2__myData(soap, (_ns2__myData *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SrbListResponse:
		soap_serialize_PointerTo_ns1__SrbListResponse(soap, (_ns1__SrbListResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SrbList:
		soap_serialize_PointerTo_ns1__SrbList(soap, (_ns1__SrbList *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons5__myData:
		soap_serialize_PointerTons5__myData(soap, (ns5__myData *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons5__SrbAuth:
		soap_serialize_PointerTons5__SrbAuth(soap, (ns5__SrbAuth *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__Include:
		soap_serialize_PointerTons3__Include(soap, (ns3__Include *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons2__SrbAuth:
		soap_serialize_PointerTons2__SrbAuth(soap, (ns2__SrbAuth *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__SrbAuth:
		soap_serialize_PointerTons1__SrbAuth(soap, (ns1__SrbAuth *const*)ptr);
		break;
	case SOAP_TYPE_PointerTounsignedByte:
		soap_serialize_PointerTounsignedByte(soap, (unsigned char *const*)ptr);
		break;
	case SOAP_TYPE_xsd__anyURI:
		soap_serialize_string(soap, (char**)&ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char**)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char**)&ptr);
		break;
	}
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_xsd__base64Binary:
		return (void*)soap_instantiate_xsd__base64Binary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__hexBinary:
		return (void*)soap_instantiate_xsd__hexBinary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__SrbAuth:
		return (void*)soap_instantiate_ns1__SrbAuth(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SrbList:
		return (void*)soap_instantiate__ns1__SrbList(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SrbListResponse:
		return (void*)soap_instantiate__ns1__SrbListResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__SrbAuth:
		return (void*)soap_instantiate_ns2__SrbAuth(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns2__SrbDownload:
		return (void*)soap_instantiate__ns2__SrbDownload(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns2__myData:
		return (void*)soap_instantiate__ns2__myData(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__Include:
		return (void*)soap_instantiate_ns3__Include(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns5__SrbAuth:
		return (void*)soap_instantiate_ns5__SrbAuth(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns5__myData:
		return (void*)soap_instantiate_ns5__myData(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns5__SrbUpload:
		return (void*)soap_instantiate__ns5__SrbUpload(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns5__fileInfo:
		return (void*)soap_instantiate__ns5__fileInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns4__base64Binary:
		return (void*)soap_instantiate_ns4__base64Binary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns4__hexBinary:
		return (void*)soap_instantiate_ns4__hexBinary(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns6__SrbList:
		return (void*)soap_instantiate___ns6__SrbList(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns7__SrbDownloadResponse:
		return (void*)soap_instantiate___ns7__SrbDownloadResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns7__SrbDownload:
		return (void*)soap_instantiate___ns7__SrbDownload(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns8__SrbUploadResponse:
		return (void*)soap_instantiate___ns8__SrbUploadResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns8__SrbUpload:
		return (void*)soap_instantiate___ns8__SrbUpload(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_xsd__base64Binary:
		if (p->size < 0)
			delete (xsd__base64Binary*)p->ptr;
		else
			delete[] (xsd__base64Binary*)p->ptr;
		break;
	case SOAP_TYPE_xsd__hexBinary:
		if (p->size < 0)
			delete (xsd__hexBinary*)p->ptr;
		else
			delete[] (xsd__hexBinary*)p->ptr;
		break;
	case SOAP_TYPE_ns1__SrbAuth:
		if (p->size < 0)
			delete (ns1__SrbAuth*)p->ptr;
		else
			delete[] (ns1__SrbAuth*)p->ptr;
		break;
	case SOAP_TYPE__ns1__SrbList:
		if (p->size < 0)
			delete (_ns1__SrbList*)p->ptr;
		else
			delete[] (_ns1__SrbList*)p->ptr;
		break;
	case SOAP_TYPE__ns1__SrbListResponse:
		if (p->size < 0)
			delete (_ns1__SrbListResponse*)p->ptr;
		else
			delete[] (_ns1__SrbListResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns2__SrbAuth:
		if (p->size < 0)
			delete (ns2__SrbAuth*)p->ptr;
		else
			delete[] (ns2__SrbAuth*)p->ptr;
		break;
	case SOAP_TYPE__ns2__SrbDownload:
		if (p->size < 0)
			delete (_ns2__SrbDownload*)p->ptr;
		else
			delete[] (_ns2__SrbDownload*)p->ptr;
		break;
	case SOAP_TYPE__ns2__myData:
		if (p->size < 0)
			delete (_ns2__myData*)p->ptr;
		else
			delete[] (_ns2__myData*)p->ptr;
		break;
	case SOAP_TYPE_ns3__Include:
		if (p->size < 0)
			delete (ns3__Include*)p->ptr;
		else
			delete[] (ns3__Include*)p->ptr;
		break;
	case SOAP_TYPE_ns5__SrbAuth:
		if (p->size < 0)
			delete (ns5__SrbAuth*)p->ptr;
		else
			delete[] (ns5__SrbAuth*)p->ptr;
		break;
	case SOAP_TYPE_ns5__myData:
		if (p->size < 0)
			delete (ns5__myData*)p->ptr;
		else
			delete[] (ns5__myData*)p->ptr;
		break;
	case SOAP_TYPE__ns5__SrbUpload:
		if (p->size < 0)
			delete (_ns5__SrbUpload*)p->ptr;
		else
			delete[] (_ns5__SrbUpload*)p->ptr;
		break;
	case SOAP_TYPE__ns5__fileInfo:
		if (p->size < 0)
			delete (_ns5__fileInfo*)p->ptr;
		else
			delete[] (_ns5__fileInfo*)p->ptr;
		break;
	case SOAP_TYPE_ns4__base64Binary:
		if (p->size < 0)
			delete (ns4__base64Binary*)p->ptr;
		else
			delete[] (ns4__base64Binary*)p->ptr;
		break;
	case SOAP_TYPE_ns4__hexBinary:
		if (p->size < 0)
			delete (ns4__hexBinary*)p->ptr;
		else
			delete[] (ns4__hexBinary*)p->ptr;
		break;
	case SOAP_TYPE___ns6__SrbList:
		if (p->size < 0)
			delete (struct __ns6__SrbList*)p->ptr;
		else
			delete[] (struct __ns6__SrbList*)p->ptr;
		break;
	case SOAP_TYPE___ns7__SrbDownloadResponse:
		if (p->size < 0)
			delete (struct __ns7__SrbDownloadResponse*)p->ptr;
		else
			delete[] (struct __ns7__SrbDownloadResponse*)p->ptr;
		break;
	case SOAP_TYPE___ns7__SrbDownload:
		if (p->size < 0)
			delete (struct __ns7__SrbDownload*)p->ptr;
		else
			delete[] (struct __ns7__SrbDownload*)p->ptr;
		break;
	case SOAP_TYPE___ns8__SrbUploadResponse:
		if (p->size < 0)
			delete (struct __ns8__SrbUploadResponse*)p->ptr;
		else
			delete[] (struct __ns8__SrbUploadResponse*)p->ptr;
		break;
	case SOAP_TYPE___ns8__SrbUpload:
		if (p->size < 0)
			delete (struct __ns8__SrbUpload*)p->ptr;
		else
			delete[] (struct __ns8__SrbUpload*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			delete (struct SOAP_ENV__Header*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Header*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			delete (struct SOAP_ENV__Code*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Code*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			delete (struct SOAP_ENV__Detail*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Detail*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			delete (struct SOAP_ENV__Reason*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Reason*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			delete (struct SOAP_ENV__Fault*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Fault*)p->ptr;
		break;
	}
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	return soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	return soap_inint(soap, tag, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedByte);
	if (soap_out_unsignedByte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedByte(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{
	return soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedInt);
	if (soap_out_unsignedInt(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{
	return soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
}

void _ns5__fileInfo::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &((_ns5__fileInfo*)this)->uriFile);
	/* transient soap skipped */
}

void _ns5__fileInfo::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &((_ns5__fileInfo*)this)->chksum);
	soap_default_string(soap, &((_ns5__fileInfo*)this)->uriFile);
	/* transient soap skipped */
}

int _ns5__fileInfo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns5__fileInfo);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns5__fileInfo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns5__fileInfo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__fileInfo(struct soap *soap, const char *tag, int id, const _ns5__fileInfo *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns5__fileInfo), type);
	soap_out_int(soap, "chksum", -1, &(((_ns5__fileInfo*)a)->chksum), "");
	soap_out_string(soap, "uriFile", -1, &(((_ns5__fileInfo*)a)->uriFile), "");
	/* transient soap skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *_ns5__fileInfo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns5__fileInfo(soap, this, tag, type);
}

SOAP_FMAC3 _ns5__fileInfo * SOAP_FMAC4 soap_get__ns5__fileInfo(struct soap *soap, _ns5__fileInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns5__fileInfo(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *_ns5__fileInfo::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns5__fileInfo(soap, tag, this, type);
}

SOAP_FMAC3 _ns5__fileInfo * SOAP_FMAC4 soap_in__ns5__fileInfo(struct soap *soap, const char *tag, _ns5__fileInfo *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns5__fileInfo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns5__fileInfo, sizeof(_ns5__fileInfo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns5__fileInfo)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns5__fileInfo *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_chksum1 = 1, soap_flag_uriFile1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_chksum1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "chksum", &(((_ns5__fileInfo*)a)->chksum), "xsd:int"))
				{	soap_flag_chksum1--;
					continue;
				}
			if (soap_flag_uriFile1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "uriFile", &(((_ns5__fileInfo*)a)->uriFile), "xsd:string"))
				{	soap_flag_uriFile1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_chksum1 > 0 || soap_flag_uriFile1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns5__fileInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns5__fileInfo, 0, sizeof(_ns5__fileInfo), 0, soap_copy__ns5__fileInfo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns5__fileInfo * SOAP_FMAC6 soap_new__ns5__fileInfo(struct soap *soap, int n)
{	return soap_instantiate__ns5__fileInfo(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns5__fileInfo(struct soap *soap, _ns5__fileInfo *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns5__fileInfo * SOAP_FMAC4 soap_instantiate__ns5__fileInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns5__fileInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns5__fileInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns5__fileInfo;
		if (size)
			*size = sizeof(_ns5__fileInfo);
		((_ns5__fileInfo*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns5__fileInfo[n];
		if (size)
			*size = n * sizeof(_ns5__fileInfo);
		for (int i = 0; i < n; i++)
			((_ns5__fileInfo*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns5__fileInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns5__fileInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns5__fileInfo %p -> %p\n", q, p));
	*(_ns5__fileInfo*)p = *(_ns5__fileInfo*)q;
}

void _ns5__SrbUpload::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons5__SrbAuth(soap, &((_ns5__SrbUpload*)this)->srbAuth);
	soap_serialize_PointerTons5__myData(soap, &((_ns5__SrbUpload*)this)->fileData);
	soap_serialize_string(soap, &((_ns5__SrbUpload*)this)->srbPath);
	soap_serialize_string(soap, &((_ns5__SrbUpload*)this)->fileName);
	/* transient soap skipped */
}

void _ns5__SrbUpload::soap_default(struct soap *soap)
{
	this->soap = soap;
	((_ns5__SrbUpload*)this)->srbAuth = NULL;
	((_ns5__SrbUpload*)this)->fileData = NULL;
	soap_default_string(soap, &((_ns5__SrbUpload*)this)->srbPath);
	soap_default_string(soap, &((_ns5__SrbUpload*)this)->fileName);
	/* transient soap skipped */
}

int _ns5__SrbUpload::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns5__SrbUpload);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns5__SrbUpload::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns5__SrbUpload(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__SrbUpload(struct soap *soap, const char *tag, int id, const _ns5__SrbUpload *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns5__SrbUpload), type);
	soap_out_PointerTons5__SrbAuth(soap, "srbAuth", -1, &(((_ns5__SrbUpload*)a)->srbAuth), "");
	soap_out_PointerTons5__myData(soap, "fileData", -1, &(((_ns5__SrbUpload*)a)->fileData), "");
	soap_out_string(soap, "srbPath", -1, &(((_ns5__SrbUpload*)a)->srbPath), "");
	soap_out_string(soap, "fileName", -1, &(((_ns5__SrbUpload*)a)->fileName), "");
	/* transient soap skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *_ns5__SrbUpload::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns5__SrbUpload(soap, this, tag, type);
}

SOAP_FMAC3 _ns5__SrbUpload * SOAP_FMAC4 soap_get__ns5__SrbUpload(struct soap *soap, _ns5__SrbUpload *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns5__SrbUpload(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *_ns5__SrbUpload::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns5__SrbUpload(soap, tag, this, type);
}

SOAP_FMAC3 _ns5__SrbUpload * SOAP_FMAC4 soap_in__ns5__SrbUpload(struct soap *soap, const char *tag, _ns5__SrbUpload *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns5__SrbUpload *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns5__SrbUpload, sizeof(_ns5__SrbUpload), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns5__SrbUpload)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns5__SrbUpload *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_srbAuth1 = 1, soap_flag_fileData1 = 1, soap_flag_srbPath1 = 1, soap_flag_fileName1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_srbAuth1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons5__SrbAuth(soap, "srbAuth", &(((_ns5__SrbUpload*)a)->srbAuth), "ns5:SrbAuth"))
				{	soap_flag_srbAuth1--;
					continue;
				}
			if (soap_flag_fileData1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons5__myData(soap, "fileData", &(((_ns5__SrbUpload*)a)->fileData), "ns5:myData"))
				{	soap_flag_fileData1--;
					continue;
				}
			if (soap_flag_srbPath1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "srbPath", &(((_ns5__SrbUpload*)a)->srbPath), "xsd:string"))
				{	soap_flag_srbPath1--;
					continue;
				}
			if (soap_flag_fileName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "fileName", &(((_ns5__SrbUpload*)a)->fileName), "xsd:string"))
				{	soap_flag_fileName1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns5__SrbUpload *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns5__SrbUpload, 0, sizeof(_ns5__SrbUpload), 0, soap_copy__ns5__SrbUpload);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns5__SrbUpload * SOAP_FMAC6 soap_new__ns5__SrbUpload(struct soap *soap, int n)
{	return soap_instantiate__ns5__SrbUpload(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns5__SrbUpload(struct soap *soap, _ns5__SrbUpload *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns5__SrbUpload * SOAP_FMAC4 soap_instantiate__ns5__SrbUpload(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns5__SrbUpload(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns5__SrbUpload, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns5__SrbUpload;
		if (size)
			*size = sizeof(_ns5__SrbUpload);
		((_ns5__SrbUpload*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns5__SrbUpload[n];
		if (size)
			*size = n * sizeof(_ns5__SrbUpload);
		for (int i = 0; i < n; i++)
			((_ns5__SrbUpload*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns5__SrbUpload*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns5__SrbUpload(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns5__SrbUpload %p -> %p\n", q, p));
	*(_ns5__SrbUpload*)p = *(_ns5__SrbUpload*)q;
}

void ns5__myData::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons3__Include(soap, &((ns5__myData*)this)->ns3__Include_);
	/* transient soap skipped */
}

void ns5__myData::soap_default(struct soap *soap)
{
	this->soap = soap;
	((ns5__myData*)this)->ns3__Include_ = NULL;
	soap_default_string(soap, &((ns5__myData*)this)->ns4__contentType);
	/* transient soap skipped */
}

int ns5__myData::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns5__myData);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns5__myData::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns5__myData(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__myData(struct soap *soap, const char *tag, int id, const ns5__myData *a, const char *type)
{
	if (((ns5__myData *)a)->ns4__contentType)
		soap_set_attr(soap, "ns4:contentType", ((ns5__myData *)a)->ns4__contentType);
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns5__myData), type);
	soap_out_PointerTons3__Include(soap, "ns3:Include", -1, &(((ns5__myData*)a)->ns3__Include_), "");
	/* transient soap skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *ns5__myData::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns5__myData(soap, this, tag, type);
}

SOAP_FMAC3 ns5__myData * SOAP_FMAC4 soap_get_ns5__myData(struct soap *soap, ns5__myData *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns5__myData(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *ns5__myData::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns5__myData(soap, tag, this, type);
}

SOAP_FMAC3 ns5__myData * SOAP_FMAC4 soap_in_ns5__myData(struct soap *soap, const char *tag, ns5__myData *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns5__myData *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns5__myData, sizeof(ns5__myData), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns5__myData)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns5__myData *)a->soap_in(soap, tag, type);
		}
	}
	if (soap_s2string(soap, soap_attr_value(soap, "ns4:contentType", 0), &((ns5__myData *)a)->ns4__contentType))
		return NULL;
	short soap_flag_ns3__Include_1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns3__Include_1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons3__Include(soap, "ns3:Include", &(((ns5__myData*)a)->ns3__Include_), "ns3:Include"))
				{	soap_flag_ns3__Include_1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ns3__Include_1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns5__myData *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns5__myData, 0, sizeof(ns5__myData), 0, soap_copy_ns5__myData);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ns5__myData * SOAP_FMAC6 soap_new_ns5__myData(struct soap *soap, int n)
{	return soap_instantiate_ns5__myData(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns5__myData(struct soap *soap, ns5__myData *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns5__myData * SOAP_FMAC4 soap_instantiate_ns5__myData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns5__myData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns5__myData, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns5__myData;
		if (size)
			*size = sizeof(ns5__myData);
		((ns5__myData*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns5__myData[n];
		if (size)
			*size = n * sizeof(ns5__myData);
		for (int i = 0; i < n; i++)
			((ns5__myData*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns5__myData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__myData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns5__myData %p -> %p\n", q, p));
	*(ns5__myData*)p = *(ns5__myData*)q;
}

void ns5__SrbAuth::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &((ns5__SrbAuth*)this)->host);
	soap_serialize_string(soap, &((ns5__SrbAuth*)this)->port);
	soap_serialize_string(soap, &((ns5__SrbAuth*)this)->pwd);
	soap_serialize_string(soap, &((ns5__SrbAuth*)this)->user);
	soap_serialize_string(soap, &((ns5__SrbAuth*)this)->domain);
	soap_serialize_string(soap, &((ns5__SrbAuth*)this)->auth_scheme);
	soap_serialize_string(soap, &((ns5__SrbAuth*)this)->server_dn);
	/* transient soap skipped */
}

void ns5__SrbAuth::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &((ns5__SrbAuth*)this)->host);
	soap_default_string(soap, &((ns5__SrbAuth*)this)->port);
	soap_default_string(soap, &((ns5__SrbAuth*)this)->pwd);
	soap_default_string(soap, &((ns5__SrbAuth*)this)->user);
	soap_default_string(soap, &((ns5__SrbAuth*)this)->domain);
	soap_default_string(soap, &((ns5__SrbAuth*)this)->auth_scheme);
	soap_default_string(soap, &((ns5__SrbAuth*)this)->server_dn);
	/* transient soap skipped */
}

int ns5__SrbAuth::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns5__SrbAuth);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns5__SrbAuth::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns5__SrbAuth(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__SrbAuth(struct soap *soap, const char *tag, int id, const ns5__SrbAuth *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns5__SrbAuth), type);
	soap_out_string(soap, "host", -1, &(((ns5__SrbAuth*)a)->host), "");
	soap_out_string(soap, "port", -1, &(((ns5__SrbAuth*)a)->port), "");
	soap_out_string(soap, "pwd", -1, &(((ns5__SrbAuth*)a)->pwd), "");
	soap_out_string(soap, "user", -1, &(((ns5__SrbAuth*)a)->user), "");
	soap_out_string(soap, "domain", -1, &(((ns5__SrbAuth*)a)->domain), "");
	soap_out_string(soap, "auth-scheme", -1, &(((ns5__SrbAuth*)a)->auth_scheme), "");
	soap_out_string(soap, "server-dn", -1, &(((ns5__SrbAuth*)a)->server_dn), "");
	/* transient soap skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *ns5__SrbAuth::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns5__SrbAuth(soap, this, tag, type);
}

SOAP_FMAC3 ns5__SrbAuth * SOAP_FMAC4 soap_get_ns5__SrbAuth(struct soap *soap, ns5__SrbAuth *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns5__SrbAuth(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *ns5__SrbAuth::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns5__SrbAuth(soap, tag, this, type);
}

SOAP_FMAC3 ns5__SrbAuth * SOAP_FMAC4 soap_in_ns5__SrbAuth(struct soap *soap, const char *tag, ns5__SrbAuth *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns5__SrbAuth *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns5__SrbAuth, sizeof(ns5__SrbAuth), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns5__SrbAuth)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns5__SrbAuth *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_host1 = 1, soap_flag_port1 = 1, soap_flag_pwd1 = 1, soap_flag_user1 = 1, soap_flag_domain1 = 1, soap_flag_auth_scheme1 = 1, soap_flag_server_dn1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_host1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "host", &(((ns5__SrbAuth*)a)->host), "xsd:string"))
				{	soap_flag_host1--;
					continue;
				}
			if (soap_flag_port1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "port", &(((ns5__SrbAuth*)a)->port), "xsd:string"))
				{	soap_flag_port1--;
					continue;
				}
			if (soap_flag_pwd1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "pwd", &(((ns5__SrbAuth*)a)->pwd), "xsd:string"))
				{	soap_flag_pwd1--;
					continue;
				}
			if (soap_flag_user1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "user", &(((ns5__SrbAuth*)a)->user), "xsd:string"))
				{	soap_flag_user1--;
					continue;
				}
			if (soap_flag_domain1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "domain", &(((ns5__SrbAuth*)a)->domain), "xsd:string"))
				{	soap_flag_domain1--;
					continue;
				}
			if (soap_flag_auth_scheme1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "auth-scheme", &(((ns5__SrbAuth*)a)->auth_scheme), "xsd:string"))
				{	soap_flag_auth_scheme1--;
					continue;
				}
			if (soap_flag_server_dn1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "server-dn", &(((ns5__SrbAuth*)a)->server_dn), "xsd:string"))
				{	soap_flag_server_dn1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns5__SrbAuth *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns5__SrbAuth, 0, sizeof(ns5__SrbAuth), 0, soap_copy_ns5__SrbAuth);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ns5__SrbAuth * SOAP_FMAC6 soap_new_ns5__SrbAuth(struct soap *soap, int n)
{	return soap_instantiate_ns5__SrbAuth(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns5__SrbAuth(struct soap *soap, ns5__SrbAuth *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns5__SrbAuth * SOAP_FMAC4 soap_instantiate_ns5__SrbAuth(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns5__SrbAuth(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns5__SrbAuth, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns5__SrbAuth;
		if (size)
			*size = sizeof(ns5__SrbAuth);
		((ns5__SrbAuth*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns5__SrbAuth[n];
		if (size)
			*size = n * sizeof(ns5__SrbAuth);
		for (int i = 0; i < n; i++)
			((ns5__SrbAuth*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns5__SrbAuth*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__SrbAuth(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns5__SrbAuth %p -> %p\n", q, p));
	*(ns5__SrbAuth*)p = *(ns5__SrbAuth*)q;
}

void ns4__hexBinary::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	((ns4__hexBinary*)this)->__item.soap_serialize(soap);
	/* transient soap skipped */
}

void ns4__hexBinary::soap_default(struct soap *soap)
{
	this->soap = soap;
	((ns4__hexBinary*)this)->__item.xsd__hexBinary::soap_default(soap);
	soap_default_string(soap, &((ns4__hexBinary*)this)->contentType);
	/* transient soap skipped */
}

int ns4__hexBinary::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns4__hexBinary);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns4__hexBinary::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns4__hexBinary(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__hexBinary(struct soap *soap, const char *tag, int id, const ns4__hexBinary *a, const char *type)
{
	if (((ns4__hexBinary *)a)->contentType)
		soap_set_attr(soap, "contentType", ((ns4__hexBinary *)a)->contentType);
	return (((ns4__hexBinary*)a)->__item).soap_out(soap, tag, id, "");
}

void *ns4__hexBinary::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns4__hexBinary(soap, this, tag, type);
}

SOAP_FMAC3 ns4__hexBinary * SOAP_FMAC4 soap_get_ns4__hexBinary(struct soap *soap, ns4__hexBinary *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns4__hexBinary(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *ns4__hexBinary::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns4__hexBinary(soap, tag, this, type);
}

SOAP_FMAC3 ns4__hexBinary * SOAP_FMAC4 soap_in_ns4__hexBinary(struct soap *soap, const char *tag, ns4__hexBinary *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (ns4__hexBinary *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns4__hexBinary, sizeof(ns4__hexBinary), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns4__hexBinary)
			return (ns4__hexBinary *)a->soap_in(soap, tag, type);
	}
	if (soap_s2string(soap, soap_attr_value(soap, "contentType", 0), &((ns4__hexBinary *)a)->contentType))
		return NULL;
	if (!(((ns4__hexBinary*)a)->__item).soap_in(soap, tag, "ns4:hexBinary"))
		return NULL;
	return a;
}

SOAP_FMAC5 ns4__hexBinary * SOAP_FMAC6 soap_new_ns4__hexBinary(struct soap *soap, int n)
{	return soap_instantiate_ns4__hexBinary(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns4__hexBinary(struct soap *soap, ns4__hexBinary *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns4__hexBinary * SOAP_FMAC4 soap_instantiate_ns4__hexBinary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns4__hexBinary(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns4__hexBinary, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns4__hexBinary;
		if (size)
			*size = sizeof(ns4__hexBinary);
		((ns4__hexBinary*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns4__hexBinary[n];
		if (size)
			*size = n * sizeof(ns4__hexBinary);
		for (int i = 0; i < n; i++)
			((ns4__hexBinary*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns4__hexBinary*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__hexBinary(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns4__hexBinary %p -> %p\n", q, p));
	*(ns4__hexBinary*)p = *(ns4__hexBinary*)q;
}

void ns4__base64Binary::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	((ns4__base64Binary*)this)->__item.soap_serialize(soap);
	/* transient soap skipped */
}

void ns4__base64Binary::soap_default(struct soap *soap)
{
	this->soap = soap;
	((ns4__base64Binary*)this)->__item.xsd__base64Binary::soap_default(soap);
	soap_default_string(soap, &((ns4__base64Binary*)this)->contentType);
	/* transient soap skipped */
}

int ns4__base64Binary::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns4__base64Binary);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns4__base64Binary::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns4__base64Binary(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__base64Binary(struct soap *soap, const char *tag, int id, const ns4__base64Binary *a, const char *type)
{
	if (((ns4__base64Binary *)a)->contentType)
		soap_set_attr(soap, "contentType", ((ns4__base64Binary *)a)->contentType);
	return (((ns4__base64Binary*)a)->__item).soap_out(soap, tag, id, "");
}

void *ns4__base64Binary::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns4__base64Binary(soap, this, tag, type);
}

SOAP_FMAC3 ns4__base64Binary * SOAP_FMAC4 soap_get_ns4__base64Binary(struct soap *soap, ns4__base64Binary *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns4__base64Binary(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *ns4__base64Binary::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns4__base64Binary(soap, tag, this, type);
}

SOAP_FMAC3 ns4__base64Binary * SOAP_FMAC4 soap_in_ns4__base64Binary(struct soap *soap, const char *tag, ns4__base64Binary *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (ns4__base64Binary *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns4__base64Binary, sizeof(ns4__base64Binary), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns4__base64Binary)
			return (ns4__base64Binary *)a->soap_in(soap, tag, type);
	}
	if (soap_s2string(soap, soap_attr_value(soap, "contentType", 0), &((ns4__base64Binary *)a)->contentType))
		return NULL;
	if (!(((ns4__base64Binary*)a)->__item).soap_in(soap, tag, "ns4:base64Binary"))
		return NULL;
	return a;
}

SOAP_FMAC5 ns4__base64Binary * SOAP_FMAC6 soap_new_ns4__base64Binary(struct soap *soap, int n)
{	return soap_instantiate_ns4__base64Binary(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns4__base64Binary(struct soap *soap, ns4__base64Binary *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns4__base64Binary * SOAP_FMAC4 soap_instantiate_ns4__base64Binary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns4__base64Binary(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns4__base64Binary, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns4__base64Binary;
		if (size)
			*size = sizeof(ns4__base64Binary);
		((ns4__base64Binary*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns4__base64Binary[n];
		if (size)
			*size = n * sizeof(ns4__base64Binary);
		for (int i = 0; i < n; i++)
			((ns4__base64Binary*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns4__base64Binary*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__base64Binary(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns4__base64Binary %p -> %p\n", q, p));
	*(ns4__base64Binary*)p = *(ns4__base64Binary*)q;
}

void ns3__Include::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

void ns3__Include::soap_default(struct soap *soap)
{
	this->soap = soap;
	((ns3__Include*)this)->__size = 0;
	((ns3__Include*)this)->__any = NULL;
	soap_default_xsd__anyURI(soap, &((ns3__Include*)this)->href);
	((ns3__Include*)this)->__anyAttribute = NULL;
	/* transient soap skipped */
}

int ns3__Include::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__Include);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns3__Include::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__Include(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__Include(struct soap *soap, const char *tag, int id, const ns3__Include *a, const char *type)
{
	if (((ns3__Include *)a)->href)
		soap_set_attr(soap, "href", ((ns3__Include *)a)->href);
	if (((ns3__Include *)a)->__anyAttribute)
		soap_set_attr(soap, "-anyAttribute", ((ns3__Include *)a)->__anyAttribute);
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__Include), type);
	if (((ns3__Include*)a)->__any)
	{	int i;
		for (i = 0; i < ((ns3__Include*)a)->__size; i++)
			soap_outliteral(soap, "-any", ((ns3__Include*)a)->__any + i, NULL);
	}
	/* transient soap skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *ns3__Include::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__Include(soap, this, tag, type);
}

SOAP_FMAC3 ns3__Include * SOAP_FMAC4 soap_get_ns3__Include(struct soap *soap, ns3__Include *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__Include(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *ns3__Include::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__Include(soap, tag, this, type);
}

SOAP_FMAC3 ns3__Include * SOAP_FMAC4 soap_in_ns3__Include(struct soap *soap, const char *tag, ns3__Include *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__Include *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__Include, sizeof(ns3__Include), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__Include)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__Include *)a->soap_in(soap, tag, type);
		}
	}
	if (soap_s2string(soap, soap_attr_value(soap, "href", 1), &((ns3__Include *)a)->href))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "-anyAttribute", 0), &((ns3__Include *)a)->__anyAttribute))
		return NULL;
	short soap_flag___any1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___any1 && soap->error == SOAP_TAG_MISMATCH)
			{	char **p;
				soap_new_block(soap);
				for (((ns3__Include*)a)->__size = 0; !soap_peek_element(soap); ((ns3__Include*)a)->__size++)
				{	p = (char **)soap_push_block(soap, sizeof(char *));
					if (!p)
						return NULL;
					*p = NULL;
					if (!soap_inliteral(soap, "-any", p))
						break;
					soap_flag___any1 = 0;
				}
				((ns3__Include*)a)->__any = (char **)soap_save_block(soap, NULL, 1);
				if (!soap_flag___any1 && soap->error == SOAP_TAG_MISMATCH)
					continue;
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__Include *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__Include, 0, sizeof(ns3__Include), 0, soap_copy_ns3__Include);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ns3__Include * SOAP_FMAC6 soap_new_ns3__Include(struct soap *soap, int n)
{	return soap_instantiate_ns3__Include(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns3__Include(struct soap *soap, ns3__Include *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns3__Include * SOAP_FMAC4 soap_instantiate_ns3__Include(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__Include(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__Include, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns3__Include;
		if (size)
			*size = sizeof(ns3__Include);
		((ns3__Include*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns3__Include[n];
		if (size)
			*size = n * sizeof(ns3__Include);
		for (int i = 0; i < n; i++)
			((ns3__Include*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns3__Include*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__Include(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__Include %p -> %p\n", q, p));
	*(ns3__Include*)p = *(ns3__Include*)q;
}

void _ns2__myData::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons3__Include(soap, &((_ns2__myData*)this)->ns3__Include_);
	/* transient soap skipped */
}

void _ns2__myData::soap_default(struct soap *soap)
{
	this->soap = soap;
	((_ns2__myData*)this)->ns3__Include_ = NULL;
	soap_default_string(soap, &((_ns2__myData*)this)->ns4__contentType);
	/* transient soap skipped */
}

int _ns2__myData::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns2__myData);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns2__myData::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns2__myData(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__myData(struct soap *soap, const char *tag, int id, const _ns2__myData *a, const char *type)
{
	if (((_ns2__myData *)a)->ns4__contentType)
		soap_set_attr(soap, "ns4:contentType", ((_ns2__myData *)a)->ns4__contentType);
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns2__myData), type);
	soap_out_PointerTons3__Include(soap, "ns3:Include", -1, &(((_ns2__myData*)a)->ns3__Include_), "");
	/* transient soap skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *_ns2__myData::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns2__myData(soap, this, tag, type);
}

SOAP_FMAC3 _ns2__myData * SOAP_FMAC4 soap_get__ns2__myData(struct soap *soap, _ns2__myData *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns2__myData(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *_ns2__myData::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns2__myData(soap, tag, this, type);
}

SOAP_FMAC3 _ns2__myData * SOAP_FMAC4 soap_in__ns2__myData(struct soap *soap, const char *tag, _ns2__myData *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns2__myData *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns2__myData, sizeof(_ns2__myData), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns2__myData)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns2__myData *)a->soap_in(soap, tag, type);
		}
	}
	if (soap_s2string(soap, soap_attr_value(soap, "ns4:contentType", 0), &((_ns2__myData *)a)->ns4__contentType))
		return NULL;
	short soap_flag_ns3__Include_1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns3__Include_1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons3__Include(soap, "ns3:Include", &(((_ns2__myData*)a)->ns3__Include_), "ns3:Include"))
				{	soap_flag_ns3__Include_1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ns3__Include_1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns2__myData *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns2__myData, 0, sizeof(_ns2__myData), 0, soap_copy__ns2__myData);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns2__myData * SOAP_FMAC6 soap_new__ns2__myData(struct soap *soap, int n)
{	return soap_instantiate__ns2__myData(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns2__myData(struct soap *soap, _ns2__myData *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns2__myData * SOAP_FMAC4 soap_instantiate__ns2__myData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns2__myData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns2__myData, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns2__myData;
		if (size)
			*size = sizeof(_ns2__myData);
		((_ns2__myData*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns2__myData[n];
		if (size)
			*size = n * sizeof(_ns2__myData);
		for (int i = 0; i < n; i++)
			((_ns2__myData*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns2__myData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns2__myData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns2__myData %p -> %p\n", q, p));
	*(_ns2__myData*)p = *(_ns2__myData*)q;
}

void _ns2__SrbDownload::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__SrbAuth(soap, &((_ns2__SrbDownload*)this)->srbAuth);
	soap_serialize_string(soap, &((_ns2__SrbDownload*)this)->srbFileName);
	soap_serialize_string(soap, &((_ns2__SrbDownload*)this)->srbPath);
	/* transient soap skipped */
}

void _ns2__SrbDownload::soap_default(struct soap *soap)
{
	this->soap = soap;
	((_ns2__SrbDownload*)this)->srbAuth = NULL;
	soap_default_string(soap, &((_ns2__SrbDownload*)this)->srbFileName);
	soap_default_string(soap, &((_ns2__SrbDownload*)this)->srbPath);
	/* transient soap skipped */
}

int _ns2__SrbDownload::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns2__SrbDownload);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns2__SrbDownload::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns2__SrbDownload(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__SrbDownload(struct soap *soap, const char *tag, int id, const _ns2__SrbDownload *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns2__SrbDownload), type);
	soap_out_PointerTons2__SrbAuth(soap, "srbAuth", -1, &(((_ns2__SrbDownload*)a)->srbAuth), "");
	soap_out_string(soap, "srbFileName", -1, &(((_ns2__SrbDownload*)a)->srbFileName), "");
	soap_out_string(soap, "srbPath", -1, &(((_ns2__SrbDownload*)a)->srbPath), "");
	/* transient soap skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *_ns2__SrbDownload::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns2__SrbDownload(soap, this, tag, type);
}

SOAP_FMAC3 _ns2__SrbDownload * SOAP_FMAC4 soap_get__ns2__SrbDownload(struct soap *soap, _ns2__SrbDownload *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns2__SrbDownload(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *_ns2__SrbDownload::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns2__SrbDownload(soap, tag, this, type);
}

SOAP_FMAC3 _ns2__SrbDownload * SOAP_FMAC4 soap_in__ns2__SrbDownload(struct soap *soap, const char *tag, _ns2__SrbDownload *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns2__SrbDownload *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns2__SrbDownload, sizeof(_ns2__SrbDownload), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns2__SrbDownload)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns2__SrbDownload *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_srbAuth1 = 1, soap_flag_srbFileName1 = 1, soap_flag_srbPath1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_srbAuth1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__SrbAuth(soap, "srbAuth", &(((_ns2__SrbDownload*)a)->srbAuth), "ns2:SrbAuth"))
				{	soap_flag_srbAuth1--;
					continue;
				}
			if (soap_flag_srbFileName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "srbFileName", &(((_ns2__SrbDownload*)a)->srbFileName), "xsd:string"))
				{	soap_flag_srbFileName1--;
					continue;
				}
			if (soap_flag_srbPath1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "srbPath", &(((_ns2__SrbDownload*)a)->srbPath), "xsd:string"))
				{	soap_flag_srbPath1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns2__SrbDownload *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns2__SrbDownload, 0, sizeof(_ns2__SrbDownload), 0, soap_copy__ns2__SrbDownload);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns2__SrbDownload * SOAP_FMAC6 soap_new__ns2__SrbDownload(struct soap *soap, int n)
{	return soap_instantiate__ns2__SrbDownload(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns2__SrbDownload(struct soap *soap, _ns2__SrbDownload *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns2__SrbDownload * SOAP_FMAC4 soap_instantiate__ns2__SrbDownload(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns2__SrbDownload(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns2__SrbDownload, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns2__SrbDownload;
		if (size)
			*size = sizeof(_ns2__SrbDownload);
		((_ns2__SrbDownload*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns2__SrbDownload[n];
		if (size)
			*size = n * sizeof(_ns2__SrbDownload);
		for (int i = 0; i < n; i++)
			((_ns2__SrbDownload*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns2__SrbDownload*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns2__SrbDownload(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns2__SrbDownload %p -> %p\n", q, p));
	*(_ns2__SrbDownload*)p = *(_ns2__SrbDownload*)q;
}

void ns2__SrbAuth::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &((ns2__SrbAuth*)this)->host);
	soap_serialize_string(soap, &((ns2__SrbAuth*)this)->port);
	soap_serialize_string(soap, &((ns2__SrbAuth*)this)->pwd);
	soap_serialize_string(soap, &((ns2__SrbAuth*)this)->user);
	soap_serialize_string(soap, &((ns2__SrbAuth*)this)->domain);
	soap_serialize_string(soap, &((ns2__SrbAuth*)this)->auth_scheme);
	soap_serialize_string(soap, &((ns2__SrbAuth*)this)->server_dn);
	/* transient soap skipped */
}

void ns2__SrbAuth::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &((ns2__SrbAuth*)this)->host);
	soap_default_string(soap, &((ns2__SrbAuth*)this)->port);
	soap_default_string(soap, &((ns2__SrbAuth*)this)->pwd);
	soap_default_string(soap, &((ns2__SrbAuth*)this)->user);
	soap_default_string(soap, &((ns2__SrbAuth*)this)->domain);
	soap_default_string(soap, &((ns2__SrbAuth*)this)->auth_scheme);
	soap_default_string(soap, &((ns2__SrbAuth*)this)->server_dn);
	/* transient soap skipped */
}

int ns2__SrbAuth::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns2__SrbAuth);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns2__SrbAuth::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns2__SrbAuth(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__SrbAuth(struct soap *soap, const char *tag, int id, const ns2__SrbAuth *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__SrbAuth), type);
	soap_out_string(soap, "host", -1, &(((ns2__SrbAuth*)a)->host), "");
	soap_out_string(soap, "port", -1, &(((ns2__SrbAuth*)a)->port), "");
	soap_out_string(soap, "pwd", -1, &(((ns2__SrbAuth*)a)->pwd), "");
	soap_out_string(soap, "user", -1, &(((ns2__SrbAuth*)a)->user), "");
	soap_out_string(soap, "domain", -1, &(((ns2__SrbAuth*)a)->domain), "");
	soap_out_string(soap, "auth-scheme", -1, &(((ns2__SrbAuth*)a)->auth_scheme), "");
	soap_out_string(soap, "server-dn", -1, &(((ns2__SrbAuth*)a)->server_dn), "");
	/* transient soap skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *ns2__SrbAuth::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns2__SrbAuth(soap, this, tag, type);
}

SOAP_FMAC3 ns2__SrbAuth * SOAP_FMAC4 soap_get_ns2__SrbAuth(struct soap *soap, ns2__SrbAuth *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__SrbAuth(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *ns2__SrbAuth::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns2__SrbAuth(soap, tag, this, type);
}

SOAP_FMAC3 ns2__SrbAuth * SOAP_FMAC4 soap_in_ns2__SrbAuth(struct soap *soap, const char *tag, ns2__SrbAuth *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns2__SrbAuth *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__SrbAuth, sizeof(ns2__SrbAuth), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns2__SrbAuth)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns2__SrbAuth *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_host1 = 1, soap_flag_port1 = 1, soap_flag_pwd1 = 1, soap_flag_user1 = 1, soap_flag_domain1 = 1, soap_flag_auth_scheme1 = 1, soap_flag_server_dn1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_host1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "host", &(((ns2__SrbAuth*)a)->host), "xsd:string"))
				{	soap_flag_host1--;
					continue;
				}
			if (soap_flag_port1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "port", &(((ns2__SrbAuth*)a)->port), "xsd:string"))
				{	soap_flag_port1--;
					continue;
				}
			if (soap_flag_pwd1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "pwd", &(((ns2__SrbAuth*)a)->pwd), "xsd:string"))
				{	soap_flag_pwd1--;
					continue;
				}
			if (soap_flag_user1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "user", &(((ns2__SrbAuth*)a)->user), "xsd:string"))
				{	soap_flag_user1--;
					continue;
				}
			if (soap_flag_domain1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "domain", &(((ns2__SrbAuth*)a)->domain), "xsd:string"))
				{	soap_flag_domain1--;
					continue;
				}
			if (soap_flag_auth_scheme1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "auth-scheme", &(((ns2__SrbAuth*)a)->auth_scheme), "xsd:string"))
				{	soap_flag_auth_scheme1--;
					continue;
				}
			if (soap_flag_server_dn1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "server-dn", &(((ns2__SrbAuth*)a)->server_dn), "xsd:string"))
				{	soap_flag_server_dn1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns2__SrbAuth *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__SrbAuth, 0, sizeof(ns2__SrbAuth), 0, soap_copy_ns2__SrbAuth);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ns2__SrbAuth * SOAP_FMAC6 soap_new_ns2__SrbAuth(struct soap *soap, int n)
{	return soap_instantiate_ns2__SrbAuth(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns2__SrbAuth(struct soap *soap, ns2__SrbAuth *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns2__SrbAuth * SOAP_FMAC4 soap_instantiate_ns2__SrbAuth(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__SrbAuth(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__SrbAuth, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns2__SrbAuth;
		if (size)
			*size = sizeof(ns2__SrbAuth);
		((ns2__SrbAuth*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns2__SrbAuth[n];
		if (size)
			*size = n * sizeof(ns2__SrbAuth);
		for (int i = 0; i < n; i++)
			((ns2__SrbAuth*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns2__SrbAuth*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__SrbAuth(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns2__SrbAuth %p -> %p\n", q, p));
	*(ns2__SrbAuth*)p = *(ns2__SrbAuth*)q;
}

void _ns1__SrbListResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &((_ns1__SrbListResponse*)this)->filelist);
	/* transient soap skipped */
}

void _ns1__SrbListResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &((_ns1__SrbListResponse*)this)->filelist);
	/* transient soap skipped */
}

int _ns1__SrbListResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__SrbListResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__SrbListResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SrbListResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SrbListResponse(struct soap *soap, const char *tag, int id, const _ns1__SrbListResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SrbListResponse), type);
	if (a->filelist)
		soap_element_result(soap, "filelist");
	soap_out_string(soap, "filelist", -1, &(((_ns1__SrbListResponse*)a)->filelist), "");
	/* transient soap skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *_ns1__SrbListResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SrbListResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SrbListResponse * SOAP_FMAC4 soap_get__ns1__SrbListResponse(struct soap *soap, _ns1__SrbListResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SrbListResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *_ns1__SrbListResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SrbListResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SrbListResponse * SOAP_FMAC4 soap_in__ns1__SrbListResponse(struct soap *soap, const char *tag, _ns1__SrbListResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SrbListResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SrbListResponse, sizeof(_ns1__SrbListResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SrbListResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SrbListResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_filelist1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_filelist1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "filelist", &(((_ns1__SrbListResponse*)a)->filelist), "xsd:string"))
				{	soap_flag_filelist1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "filelist");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_filelist1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SrbListResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SrbListResponse, 0, sizeof(_ns1__SrbListResponse), 0, soap_copy__ns1__SrbListResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__SrbListResponse * SOAP_FMAC6 soap_new__ns1__SrbListResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__SrbListResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__SrbListResponse(struct soap *soap, _ns1__SrbListResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__SrbListResponse * SOAP_FMAC4 soap_instantiate__ns1__SrbListResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SrbListResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SrbListResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__SrbListResponse;
		if (size)
			*size = sizeof(_ns1__SrbListResponse);
		((_ns1__SrbListResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__SrbListResponse[n];
		if (size)
			*size = n * sizeof(_ns1__SrbListResponse);
		for (int i = 0; i < n; i++)
			((_ns1__SrbListResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__SrbListResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SrbListResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SrbListResponse %p -> %p\n", q, p));
	*(_ns1__SrbListResponse*)p = *(_ns1__SrbListResponse*)q;
}

void _ns1__SrbList::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__SrbAuth(soap, &((_ns1__SrbList*)this)->srbAuth);
	/* transient soap skipped */
}

void _ns1__SrbList::soap_default(struct soap *soap)
{
	this->soap = soap;
	((_ns1__SrbList*)this)->srbAuth = NULL;
	/* transient soap skipped */
}

int _ns1__SrbList::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__SrbList);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__SrbList::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SrbList(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SrbList(struct soap *soap, const char *tag, int id, const _ns1__SrbList *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SrbList), type);
	soap_out_PointerTons1__SrbAuth(soap, "srbAuth", -1, &(((_ns1__SrbList*)a)->srbAuth), "");
	/* transient soap skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *_ns1__SrbList::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SrbList(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SrbList * SOAP_FMAC4 soap_get__ns1__SrbList(struct soap *soap, _ns1__SrbList *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SrbList(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *_ns1__SrbList::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SrbList(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SrbList * SOAP_FMAC4 soap_in__ns1__SrbList(struct soap *soap, const char *tag, _ns1__SrbList *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SrbList *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SrbList, sizeof(_ns1__SrbList), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SrbList)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SrbList *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_srbAuth1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_srbAuth1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__SrbAuth(soap, "srbAuth", &(((_ns1__SrbList*)a)->srbAuth), "ns1:SrbAuth"))
				{	soap_flag_srbAuth1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SrbList *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SrbList, 0, sizeof(_ns1__SrbList), 0, soap_copy__ns1__SrbList);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__SrbList * SOAP_FMAC6 soap_new__ns1__SrbList(struct soap *soap, int n)
{	return soap_instantiate__ns1__SrbList(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__SrbList(struct soap *soap, _ns1__SrbList *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__SrbList * SOAP_FMAC4 soap_instantiate__ns1__SrbList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SrbList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SrbList, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__SrbList;
		if (size)
			*size = sizeof(_ns1__SrbList);
		((_ns1__SrbList*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__SrbList[n];
		if (size)
			*size = n * sizeof(_ns1__SrbList);
		for (int i = 0; i < n; i++)
			((_ns1__SrbList*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__SrbList*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SrbList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SrbList %p -> %p\n", q, p));
	*(_ns1__SrbList*)p = *(_ns1__SrbList*)q;
}

void ns1__SrbAuth::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &((ns1__SrbAuth*)this)->host);
	soap_serialize_string(soap, &((ns1__SrbAuth*)this)->port);
	soap_serialize_string(soap, &((ns1__SrbAuth*)this)->pwd);
	soap_serialize_string(soap, &((ns1__SrbAuth*)this)->user);
	soap_serialize_string(soap, &((ns1__SrbAuth*)this)->domain);
	soap_serialize_string(soap, &((ns1__SrbAuth*)this)->auth_scheme);
	soap_serialize_string(soap, &((ns1__SrbAuth*)this)->server_dn);
	/* transient soap skipped */
}

void ns1__SrbAuth::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &((ns1__SrbAuth*)this)->host);
	soap_default_string(soap, &((ns1__SrbAuth*)this)->port);
	soap_default_string(soap, &((ns1__SrbAuth*)this)->pwd);
	soap_default_string(soap, &((ns1__SrbAuth*)this)->user);
	soap_default_string(soap, &((ns1__SrbAuth*)this)->domain);
	soap_default_string(soap, &((ns1__SrbAuth*)this)->auth_scheme);
	soap_default_string(soap, &((ns1__SrbAuth*)this)->server_dn);
	/* transient soap skipped */
}

int ns1__SrbAuth::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__SrbAuth);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__SrbAuth::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__SrbAuth(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrbAuth(struct soap *soap, const char *tag, int id, const ns1__SrbAuth *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__SrbAuth), type);
	soap_out_string(soap, "host", -1, &(((ns1__SrbAuth*)a)->host), "");
	soap_out_string(soap, "port", -1, &(((ns1__SrbAuth*)a)->port), "");
	soap_out_string(soap, "pwd", -1, &(((ns1__SrbAuth*)a)->pwd), "");
	soap_out_string(soap, "user", -1, &(((ns1__SrbAuth*)a)->user), "");
	soap_out_string(soap, "domain", -1, &(((ns1__SrbAuth*)a)->domain), "");
	soap_out_string(soap, "auth-scheme", -1, &(((ns1__SrbAuth*)a)->auth_scheme), "");
	soap_out_string(soap, "server-dn", -1, &(((ns1__SrbAuth*)a)->server_dn), "");
	/* transient soap skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *ns1__SrbAuth::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__SrbAuth(soap, this, tag, type);
}

SOAP_FMAC3 ns1__SrbAuth * SOAP_FMAC4 soap_get_ns1__SrbAuth(struct soap *soap, ns1__SrbAuth *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__SrbAuth(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *ns1__SrbAuth::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__SrbAuth(soap, tag, this, type);
}

SOAP_FMAC3 ns1__SrbAuth * SOAP_FMAC4 soap_in_ns1__SrbAuth(struct soap *soap, const char *tag, ns1__SrbAuth *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__SrbAuth *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__SrbAuth, sizeof(ns1__SrbAuth), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__SrbAuth)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__SrbAuth *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_host1 = 1, soap_flag_port1 = 1, soap_flag_pwd1 = 1, soap_flag_user1 = 1, soap_flag_domain1 = 1, soap_flag_auth_scheme1 = 1, soap_flag_server_dn1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_host1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "host", &(((ns1__SrbAuth*)a)->host), "xsd:string"))
				{	soap_flag_host1--;
					continue;
				}
			if (soap_flag_port1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "port", &(((ns1__SrbAuth*)a)->port), "xsd:string"))
				{	soap_flag_port1--;
					continue;
				}
			if (soap_flag_pwd1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "pwd", &(((ns1__SrbAuth*)a)->pwd), "xsd:string"))
				{	soap_flag_pwd1--;
					continue;
				}
			if (soap_flag_user1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "user", &(((ns1__SrbAuth*)a)->user), "xsd:string"))
				{	soap_flag_user1--;
					continue;
				}
			if (soap_flag_domain1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "domain", &(((ns1__SrbAuth*)a)->domain), "xsd:string"))
				{	soap_flag_domain1--;
					continue;
				}
			if (soap_flag_auth_scheme1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "auth-scheme", &(((ns1__SrbAuth*)a)->auth_scheme), "xsd:string"))
				{	soap_flag_auth_scheme1--;
					continue;
				}
			if (soap_flag_server_dn1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "server-dn", &(((ns1__SrbAuth*)a)->server_dn), "xsd:string"))
				{	soap_flag_server_dn1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__SrbAuth *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__SrbAuth, 0, sizeof(ns1__SrbAuth), 0, soap_copy_ns1__SrbAuth);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__SrbAuth * SOAP_FMAC6 soap_new_ns1__SrbAuth(struct soap *soap, int n)
{	return soap_instantiate_ns1__SrbAuth(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__SrbAuth(struct soap *soap, ns1__SrbAuth *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__SrbAuth * SOAP_FMAC4 soap_instantiate_ns1__SrbAuth(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__SrbAuth(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__SrbAuth, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__SrbAuth;
		if (size)
			*size = sizeof(ns1__SrbAuth);
		((ns1__SrbAuth*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__SrbAuth[n];
		if (size)
			*size = n * sizeof(ns1__SrbAuth);
		for (int i = 0; i < n; i++)
			((ns1__SrbAuth*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__SrbAuth*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__SrbAuth(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__SrbAuth %p -> %p\n", q, p));
	*(ns1__SrbAuth*)p = *(ns1__SrbAuth*)q;
}

void xsd__hexBinary::soap_serialize(struct soap *soap) const
{
	if (this->__ptr)
		soap_array_reference(soap, this, (struct soap_array*)&this->__ptr, 1, SOAP_TYPE_xsd__hexBinary);
}

void xsd__hexBinary::soap_default(struct soap *soap)
{
	this->__size = 0;
	this->__ptr = NULL;
}

int xsd__hexBinary::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, (struct soap_array*)&this->__ptr, 1, tag, SOAP_TYPE_xsd__hexBinary);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int xsd__hexBinary::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_xsd__hexBinary(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__hexBinary(struct soap *soap, const char *tag, int id, const xsd__hexBinary *a, const char *type)
{
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptr, 1, type, SOAP_TYPE_xsd__hexBinary);
	if (id < 0)
		return soap->error;
	soap_element_begin_out(soap, tag, id, type);
	soap_puthex(soap, a->__ptr, a->__size);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *xsd__hexBinary::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__hexBinary(soap, this, tag, type);
}

SOAP_FMAC3 xsd__hexBinary * SOAP_FMAC4 soap_get_xsd__hexBinary(struct soap *soap, xsd__hexBinary *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__hexBinary(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *xsd__hexBinary::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__hexBinary(soap, tag, this, type);
}

SOAP_FMAC3 xsd__hexBinary * SOAP_FMAC4 soap_in_xsd__hexBinary(struct soap *soap, const char *tag, xsd__hexBinary *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":hexBinary"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (xsd__hexBinary *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__hexBinary, sizeof(xsd__hexBinary), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__ptr = soap_gethex(soap, &a->__size);
		if ((!a->__ptr && soap->error) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (xsd__hexBinary *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_xsd__hexBinary, 0, sizeof(xsd__hexBinary), 0, soap_copy_xsd__hexBinary);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 xsd__hexBinary * SOAP_FMAC6 soap_new_xsd__hexBinary(struct soap *soap, int n)
{	return soap_instantiate_xsd__hexBinary(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_xsd__hexBinary(struct soap *soap, xsd__hexBinary *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 xsd__hexBinary * SOAP_FMAC4 soap_instantiate_xsd__hexBinary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__hexBinary(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__hexBinary, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new xsd__hexBinary;
		if (size)
			*size = sizeof(xsd__hexBinary);
	}
	else
	{	cp->ptr = (void*)new xsd__hexBinary[n];
		if (size)
			*size = n * sizeof(xsd__hexBinary);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__hexBinary*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__hexBinary(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__hexBinary %p -> %p\n", q, p));
	*(xsd__hexBinary*)p = *(xsd__hexBinary*)q;
}

void xsd__base64Binary::soap_serialize(struct soap *soap) const
{
	if (this->__ptr && !soap_array_reference(soap, this, (struct soap_array*)&this->__ptr, 1, SOAP_TYPE_xsd__base64Binary))
		if (this->id || this->type)
			soap->mode |= SOAP_ENC_DIME;
}

void xsd__base64Binary::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__size = 0;
	this->__ptr = NULL;
	this->id = NULL;
	this->type = NULL;
	this->options = NULL;
}

int xsd__base64Binary::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, (struct soap_array*)&this->__ptr, 1, tag, SOAP_TYPE_xsd__base64Binary);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int xsd__base64Binary::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_xsd__base64Binary(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap *soap, const char *tag, int id, const xsd__base64Binary *a, const char *type)
{
#ifndef WITH_LEANER
	id = soap_attachment(soap, tag, id, a, (struct soap_array*)&a->__ptr, a->id, a->type, a->options, 1, type, SOAP_TYPE_xsd__base64Binary);
#else
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptr, 1, type, SOAP_TYPE_xsd__base64Binary);
#endif
	if (id < 0)
		return soap->error;
	soap_element_begin_out(soap, tag, id, type);
	soap_putbase64(soap, a->__ptr, a->__size);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *xsd__base64Binary::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__base64Binary(soap, this, tag, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__base64Binary(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *xsd__base64Binary::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__base64Binary(soap, tag, this, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap *soap, const char *tag, xsd__base64Binary *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":base64Binary") && soap_match_tag(soap, soap->type, ":base64"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (xsd__base64Binary *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__base64Binary, sizeof(xsd__base64Binary), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__ptr = soap_getbase64(soap, &a->__size, 0);
#ifndef WITH_LEANER
		if (soap_xop_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
			return NULL;
#endif
		if ((!a->__ptr && soap->error) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	
#ifndef WITH_LEANER
		if (*soap->href != '#')
		{	if (soap_dime_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
				return NULL;
		}
		else
#endif
			a = (xsd__base64Binary *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_xsd__base64Binary, 0, sizeof(xsd__base64Binary), 0, soap_copy_xsd__base64Binary);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 xsd__base64Binary * SOAP_FMAC6 soap_new_xsd__base64Binary(struct soap *soap, int n)
{	return soap_instantiate_xsd__base64Binary(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_instantiate_xsd__base64Binary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__base64Binary(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__base64Binary, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new xsd__base64Binary;
		if (size)
			*size = sizeof(xsd__base64Binary);
		((xsd__base64Binary*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new xsd__base64Binary[n];
		if (size)
			*size = n * sizeof(xsd__base64Binary);
		for (int i = 0; i < n; i++)
			((xsd__base64Binary*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__base64Binary*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__base64Binary(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__base64Binary %p -> %p\n", q, p));
	*(xsd__base64Binary*)p = *(xsd__base64Binary*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type);
	soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, "");
	soap_out_string(soap, "faultstring", -1, &a->faultstring, "");
	soap_out_string(soap, "faultactor", -1, &a->faultactor, "");
	soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, "");
	soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, "");
	soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, "");
	soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, "");
	soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, "");
	soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	short soap_flag_faultcode = 1, soap_flag_faultstring = 1, soap_flag_faultactor = 1, soap_flag_detail = 1, soap_flag_SOAP_ENV__Code = 1, soap_flag_SOAP_ENV__Reason = 1, soap_flag_SOAP_ENV__Node = 1, soap_flag_SOAP_ENV__Role = 1, soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Fault * SOAP_FMAC6 soap_new_SOAP_ENV__Fault(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault;
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault[n];
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type);
	soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	short soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Reason * SOAP_FMAC6 soap_new_SOAP_ENV__Reason(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason;
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason[n];
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type);
	soap_putelement(soap, a->fault, "fault", -1, a->__type);
	soap_outliteral(soap, "-any", &a->__any, NULL);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	short soap_flag_fault = 1, soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Detail * SOAP_FMAC6 soap_new_SOAP_ENV__Detail(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail;
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail[n];
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type);
	soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, "");
	soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	short soap_flag_SOAP_ENV__Value = 1, soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Code * SOAP_FMAC6 soap_new_SOAP_ENV__Code(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Code;
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Code[n];
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	/* transient dummy skipped */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	/* transient dummy skipped */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type);
	/* transient dummy skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
		/* transient dummy skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Header * SOAP_FMAC6 soap_new_SOAP_ENV__Header(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Header;
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Header[n];
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns8__SrbUpload(struct soap *soap, const struct __ns8__SrbUpload *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns5__SrbUpload(soap, &a->ns5__SrbUpload);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns8__SrbUpload(struct soap *soap, struct __ns8__SrbUpload *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns5__SrbUpload = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns8__SrbUpload(struct soap *soap, const struct __ns8__SrbUpload *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns8__SrbUpload(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns8__SrbUpload(struct soap *soap, const char *tag, int id, const struct __ns8__SrbUpload *a, const char *type)
{
	soap_out_PointerTo_ns5__SrbUpload(soap, "ns5:SrbUpload", -1, &a->ns5__SrbUpload, "");
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns8__SrbUpload * SOAP_FMAC4 soap_get___ns8__SrbUpload(struct soap *soap, struct __ns8__SrbUpload *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns8__SrbUpload(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct __ns8__SrbUpload * SOAP_FMAC4 soap_in___ns8__SrbUpload(struct soap *soap, const char *tag, struct __ns8__SrbUpload *a, const char *type)
{
	short soap_flag_ns5__SrbUpload = 1;
	a = (struct __ns8__SrbUpload *)soap_id_enter(soap, soap->id, a, SOAP_TYPE___ns8__SrbUpload, sizeof(struct __ns8__SrbUpload), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns8__SrbUpload(soap, a);
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns5__SrbUpload && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns5__SrbUpload(soap, "ns5:SrbUpload", &a->ns5__SrbUpload, ""))
				{	soap_flag_ns5__SrbUpload--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns8__SrbUpload * SOAP_FMAC6 soap_new___ns8__SrbUpload(struct soap *soap, int n)
{	return soap_instantiate___ns8__SrbUpload(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns8__SrbUpload(struct soap *soap, struct __ns8__SrbUpload *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns8__SrbUpload * SOAP_FMAC4 soap_instantiate___ns8__SrbUpload(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns8__SrbUpload(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns8__SrbUpload, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns8__SrbUpload;
		if (size)
			*size = sizeof(struct __ns8__SrbUpload);
	}
	else
	{	cp->ptr = (void*)new struct __ns8__SrbUpload[n];
		if (size)
			*size = n * sizeof(struct __ns8__SrbUpload);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns8__SrbUpload*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns8__SrbUpload(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns8__SrbUpload %p -> %p\n", q, p));
	*(struct __ns8__SrbUpload*)p = *(struct __ns8__SrbUpload*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns8__SrbUploadResponse(struct soap *soap, const struct __ns8__SrbUploadResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns5__fileInfo(soap, &a->ns5__fileInfo);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns8__SrbUploadResponse(struct soap *soap, struct __ns8__SrbUploadResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns5__fileInfo = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns8__SrbUploadResponse(struct soap *soap, const struct __ns8__SrbUploadResponse *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns8__SrbUploadResponse(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns8__SrbUploadResponse(struct soap *soap, const char *tag, int id, const struct __ns8__SrbUploadResponse *a, const char *type)
{
	if (a->ns5__fileInfo)
		soap_element_result(soap, "ns5:fileInfo");
	soap_out_PointerTo_ns5__fileInfo(soap, "ns5:fileInfo", -1, &a->ns5__fileInfo, "");
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns8__SrbUploadResponse * SOAP_FMAC4 soap_get___ns8__SrbUploadResponse(struct soap *soap, struct __ns8__SrbUploadResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns8__SrbUploadResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct __ns8__SrbUploadResponse * SOAP_FMAC4 soap_in___ns8__SrbUploadResponse(struct soap *soap, const char *tag, struct __ns8__SrbUploadResponse *a, const char *type)
{
	short soap_flag_ns5__fileInfo = 1;
	a = (struct __ns8__SrbUploadResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE___ns8__SrbUploadResponse, sizeof(struct __ns8__SrbUploadResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns8__SrbUploadResponse(soap, a);
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns5__fileInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns5__fileInfo(soap, "ns5:fileInfo", &a->ns5__fileInfo, ""))
				{	soap_flag_ns5__fileInfo--;
					continue;
				}
			soap_check_result(soap, "ns5:fileInfo");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns8__SrbUploadResponse * SOAP_FMAC6 soap_new___ns8__SrbUploadResponse(struct soap *soap, int n)
{	return soap_instantiate___ns8__SrbUploadResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns8__SrbUploadResponse(struct soap *soap, struct __ns8__SrbUploadResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns8__SrbUploadResponse * SOAP_FMAC4 soap_instantiate___ns8__SrbUploadResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns8__SrbUploadResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns8__SrbUploadResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns8__SrbUploadResponse;
		if (size)
			*size = sizeof(struct __ns8__SrbUploadResponse);
	}
	else
	{	cp->ptr = (void*)new struct __ns8__SrbUploadResponse[n];
		if (size)
			*size = n * sizeof(struct __ns8__SrbUploadResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns8__SrbUploadResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns8__SrbUploadResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns8__SrbUploadResponse %p -> %p\n", q, p));
	*(struct __ns8__SrbUploadResponse*)p = *(struct __ns8__SrbUploadResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns7__SrbDownload(struct soap *soap, const struct __ns7__SrbDownload *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns2__SrbDownload(soap, &a->ns2__SrbDownload);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns7__SrbDownload(struct soap *soap, struct __ns7__SrbDownload *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns2__SrbDownload = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns7__SrbDownload(struct soap *soap, const struct __ns7__SrbDownload *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns7__SrbDownload(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns7__SrbDownload(struct soap *soap, const char *tag, int id, const struct __ns7__SrbDownload *a, const char *type)
{
	soap_out_PointerTo_ns2__SrbDownload(soap, "ns2:SrbDownload", -1, &a->ns2__SrbDownload, "");
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns7__SrbDownload * SOAP_FMAC4 soap_get___ns7__SrbDownload(struct soap *soap, struct __ns7__SrbDownload *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns7__SrbDownload(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct __ns7__SrbDownload * SOAP_FMAC4 soap_in___ns7__SrbDownload(struct soap *soap, const char *tag, struct __ns7__SrbDownload *a, const char *type)
{
	short soap_flag_ns2__SrbDownload = 1;
	a = (struct __ns7__SrbDownload *)soap_id_enter(soap, soap->id, a, SOAP_TYPE___ns7__SrbDownload, sizeof(struct __ns7__SrbDownload), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns7__SrbDownload(soap, a);
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns2__SrbDownload && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns2__SrbDownload(soap, "ns2:SrbDownload", &a->ns2__SrbDownload, ""))
				{	soap_flag_ns2__SrbDownload--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns7__SrbDownload * SOAP_FMAC6 soap_new___ns7__SrbDownload(struct soap *soap, int n)
{	return soap_instantiate___ns7__SrbDownload(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns7__SrbDownload(struct soap *soap, struct __ns7__SrbDownload *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns7__SrbDownload * SOAP_FMAC4 soap_instantiate___ns7__SrbDownload(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns7__SrbDownload(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns7__SrbDownload, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns7__SrbDownload;
		if (size)
			*size = sizeof(struct __ns7__SrbDownload);
	}
	else
	{	cp->ptr = (void*)new struct __ns7__SrbDownload[n];
		if (size)
			*size = n * sizeof(struct __ns7__SrbDownload);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns7__SrbDownload*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns7__SrbDownload(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns7__SrbDownload %p -> %p\n", q, p));
	*(struct __ns7__SrbDownload*)p = *(struct __ns7__SrbDownload*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns7__SrbDownloadResponse(struct soap *soap, const struct __ns7__SrbDownloadResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns2__myData(soap, &a->ns2__myData);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns7__SrbDownloadResponse(struct soap *soap, struct __ns7__SrbDownloadResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns2__myData = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns7__SrbDownloadResponse(struct soap *soap, const struct __ns7__SrbDownloadResponse *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns7__SrbDownloadResponse(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns7__SrbDownloadResponse(struct soap *soap, const char *tag, int id, const struct __ns7__SrbDownloadResponse *a, const char *type)
{
	if (a->ns2__myData)
		soap_element_result(soap, "ns2:myData");
	soap_out_PointerTo_ns2__myData(soap, "ns2:myData", -1, &a->ns2__myData, "");
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns7__SrbDownloadResponse * SOAP_FMAC4 soap_get___ns7__SrbDownloadResponse(struct soap *soap, struct __ns7__SrbDownloadResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns7__SrbDownloadResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct __ns7__SrbDownloadResponse * SOAP_FMAC4 soap_in___ns7__SrbDownloadResponse(struct soap *soap, const char *tag, struct __ns7__SrbDownloadResponse *a, const char *type)
{
	short soap_flag_ns2__myData = 1;
	a = (struct __ns7__SrbDownloadResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE___ns7__SrbDownloadResponse, sizeof(struct __ns7__SrbDownloadResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns7__SrbDownloadResponse(soap, a);
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns2__myData && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns2__myData(soap, "ns2:myData", &a->ns2__myData, ""))
				{	soap_flag_ns2__myData--;
					continue;
				}
			soap_check_result(soap, "ns2:myData");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns7__SrbDownloadResponse * SOAP_FMAC6 soap_new___ns7__SrbDownloadResponse(struct soap *soap, int n)
{	return soap_instantiate___ns7__SrbDownloadResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns7__SrbDownloadResponse(struct soap *soap, struct __ns7__SrbDownloadResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns7__SrbDownloadResponse * SOAP_FMAC4 soap_instantiate___ns7__SrbDownloadResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns7__SrbDownloadResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns7__SrbDownloadResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns7__SrbDownloadResponse;
		if (size)
			*size = sizeof(struct __ns7__SrbDownloadResponse);
	}
	else
	{	cp->ptr = (void*)new struct __ns7__SrbDownloadResponse[n];
		if (size)
			*size = n * sizeof(struct __ns7__SrbDownloadResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns7__SrbDownloadResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns7__SrbDownloadResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns7__SrbDownloadResponse %p -> %p\n", q, p));
	*(struct __ns7__SrbDownloadResponse*)p = *(struct __ns7__SrbDownloadResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns6__SrbList(struct soap *soap, const struct __ns6__SrbList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__SrbList(soap, &a->ns1__SrbList);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns6__SrbList(struct soap *soap, struct __ns6__SrbList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__SrbList = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns6__SrbList(struct soap *soap, const struct __ns6__SrbList *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns6__SrbList(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns6__SrbList(struct soap *soap, const char *tag, int id, const struct __ns6__SrbList *a, const char *type)
{
	soap_out_PointerTo_ns1__SrbList(soap, "ns1:SrbList", -1, &a->ns1__SrbList, "");
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns6__SrbList * SOAP_FMAC4 soap_get___ns6__SrbList(struct soap *soap, struct __ns6__SrbList *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns6__SrbList(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct __ns6__SrbList * SOAP_FMAC4 soap_in___ns6__SrbList(struct soap *soap, const char *tag, struct __ns6__SrbList *a, const char *type)
{
	short soap_flag_ns1__SrbList = 1;
	a = (struct __ns6__SrbList *)soap_id_enter(soap, soap->id, a, SOAP_TYPE___ns6__SrbList, sizeof(struct __ns6__SrbList), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns6__SrbList(soap, a);
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__SrbList && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__SrbList(soap, "ns1:SrbList", &a->ns1__SrbList, ""))
				{	soap_flag_ns1__SrbList--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns6__SrbList * SOAP_FMAC6 soap_new___ns6__SrbList(struct soap *soap, int n)
{	return soap_instantiate___ns6__SrbList(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns6__SrbList(struct soap *soap, struct __ns6__SrbList *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns6__SrbList * SOAP_FMAC4 soap_instantiate___ns6__SrbList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns6__SrbList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns6__SrbList, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns6__SrbList;
		if (size)
			*size = sizeof(struct __ns6__SrbList);
	}
	else
	{	cp->ptr = (void*)new struct __ns6__SrbList[n];
		if (size)
			*size = n * sizeof(struct __ns6__SrbList);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns6__SrbList*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns6__SrbList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns6__SrbList %p -> %p\n", q, p));
	*(struct __ns6__SrbList*)p = *(struct __ns6__SrbList*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns5__SrbUpload(struct soap *soap, _ns5__SrbUpload *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns5__SrbUpload))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns5__SrbUpload(struct soap *soap, _ns5__SrbUpload *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns5__SrbUpload);
	if (soap_out_PointerTo_ns5__SrbUpload(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns5__SrbUpload(struct soap *soap, const char *tag, int id, _ns5__SrbUpload *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns5__SrbUpload);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns5__SrbUpload ** SOAP_FMAC4 soap_get_PointerTo_ns5__SrbUpload(struct soap *soap, _ns5__SrbUpload **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns5__SrbUpload(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 _ns5__SrbUpload ** SOAP_FMAC4 soap_in_PointerTo_ns5__SrbUpload(struct soap *soap, const char *tag, _ns5__SrbUpload **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns5__SrbUpload **)soap_malloc(soap, sizeof(_ns5__SrbUpload *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns5__SrbUpload *)soap_instantiate__ns5__SrbUpload(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (_ns5__SrbUpload **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns5__SrbUpload, sizeof(_ns5__SrbUpload), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns5__fileInfo(struct soap *soap, _ns5__fileInfo *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns5__fileInfo))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns5__fileInfo(struct soap *soap, _ns5__fileInfo *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns5__fileInfo);
	if (soap_out_PointerTo_ns5__fileInfo(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns5__fileInfo(struct soap *soap, const char *tag, int id, _ns5__fileInfo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns5__fileInfo);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns5__fileInfo ** SOAP_FMAC4 soap_get_PointerTo_ns5__fileInfo(struct soap *soap, _ns5__fileInfo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns5__fileInfo(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 _ns5__fileInfo ** SOAP_FMAC4 soap_in_PointerTo_ns5__fileInfo(struct soap *soap, const char *tag, _ns5__fileInfo **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns5__fileInfo **)soap_malloc(soap, sizeof(_ns5__fileInfo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns5__fileInfo *)soap_instantiate__ns5__fileInfo(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (_ns5__fileInfo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns5__fileInfo, sizeof(_ns5__fileInfo), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__SrbDownload(struct soap *soap, _ns2__SrbDownload *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns2__SrbDownload))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__SrbDownload(struct soap *soap, _ns2__SrbDownload *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns2__SrbDownload);
	if (soap_out_PointerTo_ns2__SrbDownload(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__SrbDownload(struct soap *soap, const char *tag, int id, _ns2__SrbDownload *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns2__SrbDownload);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns2__SrbDownload ** SOAP_FMAC4 soap_get_PointerTo_ns2__SrbDownload(struct soap *soap, _ns2__SrbDownload **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns2__SrbDownload(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 _ns2__SrbDownload ** SOAP_FMAC4 soap_in_PointerTo_ns2__SrbDownload(struct soap *soap, const char *tag, _ns2__SrbDownload **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns2__SrbDownload **)soap_malloc(soap, sizeof(_ns2__SrbDownload *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns2__SrbDownload *)soap_instantiate__ns2__SrbDownload(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (_ns2__SrbDownload **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns2__SrbDownload, sizeof(_ns2__SrbDownload), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__myData(struct soap *soap, _ns2__myData *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns2__myData))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__myData(struct soap *soap, _ns2__myData *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns2__myData);
	if (soap_out_PointerTo_ns2__myData(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__myData(struct soap *soap, const char *tag, int id, _ns2__myData *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns2__myData);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns2__myData ** SOAP_FMAC4 soap_get_PointerTo_ns2__myData(struct soap *soap, _ns2__myData **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns2__myData(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 _ns2__myData ** SOAP_FMAC4 soap_in_PointerTo_ns2__myData(struct soap *soap, const char *tag, _ns2__myData **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns2__myData **)soap_malloc(soap, sizeof(_ns2__myData *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns2__myData *)soap_instantiate__ns2__myData(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (_ns2__myData **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns2__myData, sizeof(_ns2__myData), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SrbListResponse(struct soap *soap, _ns1__SrbListResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SrbListResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SrbListResponse(struct soap *soap, _ns1__SrbListResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__SrbListResponse);
	if (soap_out_PointerTo_ns1__SrbListResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SrbListResponse(struct soap *soap, const char *tag, int id, _ns1__SrbListResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SrbListResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__SrbListResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__SrbListResponse(struct soap *soap, _ns1__SrbListResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SrbListResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 _ns1__SrbListResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__SrbListResponse(struct soap *soap, const char *tag, _ns1__SrbListResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SrbListResponse **)soap_malloc(soap, sizeof(_ns1__SrbListResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SrbListResponse *)soap_instantiate__ns1__SrbListResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (_ns1__SrbListResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SrbListResponse, sizeof(_ns1__SrbListResponse), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SrbList(struct soap *soap, _ns1__SrbList *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SrbList))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SrbList(struct soap *soap, _ns1__SrbList *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__SrbList);
	if (soap_out_PointerTo_ns1__SrbList(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SrbList(struct soap *soap, const char *tag, int id, _ns1__SrbList *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SrbList);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__SrbList ** SOAP_FMAC4 soap_get_PointerTo_ns1__SrbList(struct soap *soap, _ns1__SrbList **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SrbList(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 _ns1__SrbList ** SOAP_FMAC4 soap_in_PointerTo_ns1__SrbList(struct soap *soap, const char *tag, _ns1__SrbList **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SrbList **)soap_malloc(soap, sizeof(_ns1__SrbList *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SrbList *)soap_instantiate__ns1__SrbList(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (_ns1__SrbList **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SrbList, sizeof(_ns1__SrbList), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__myData(struct soap *soap, ns5__myData *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns5__myData))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__myData(struct soap *soap, ns5__myData *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons5__myData);
	if (soap_out_PointerTons5__myData(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__myData(struct soap *soap, const char *tag, int id, ns5__myData *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns5__myData);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns5__myData ** SOAP_FMAC4 soap_get_PointerTons5__myData(struct soap *soap, ns5__myData **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons5__myData(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 ns5__myData ** SOAP_FMAC4 soap_in_PointerTons5__myData(struct soap *soap, const char *tag, ns5__myData **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns5__myData **)soap_malloc(soap, sizeof(ns5__myData *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns5__myData *)soap_instantiate_ns5__myData(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (ns5__myData **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns5__myData, sizeof(ns5__myData), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__SrbAuth(struct soap *soap, ns5__SrbAuth *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns5__SrbAuth))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__SrbAuth(struct soap *soap, ns5__SrbAuth *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons5__SrbAuth);
	if (soap_out_PointerTons5__SrbAuth(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__SrbAuth(struct soap *soap, const char *tag, int id, ns5__SrbAuth *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns5__SrbAuth);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns5__SrbAuth ** SOAP_FMAC4 soap_get_PointerTons5__SrbAuth(struct soap *soap, ns5__SrbAuth **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons5__SrbAuth(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 ns5__SrbAuth ** SOAP_FMAC4 soap_in_PointerTons5__SrbAuth(struct soap *soap, const char *tag, ns5__SrbAuth **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns5__SrbAuth **)soap_malloc(soap, sizeof(ns5__SrbAuth *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns5__SrbAuth *)soap_instantiate_ns5__SrbAuth(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (ns5__SrbAuth **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns5__SrbAuth, sizeof(ns5__SrbAuth), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__Include(struct soap *soap, ns3__Include *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__Include))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__Include(struct soap *soap, ns3__Include *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__Include);
	if (soap_out_PointerTons3__Include(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__Include(struct soap *soap, const char *tag, int id, ns3__Include *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__Include);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__Include ** SOAP_FMAC4 soap_get_PointerTons3__Include(struct soap *soap, ns3__Include **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__Include(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 ns3__Include ** SOAP_FMAC4 soap_in_PointerTons3__Include(struct soap *soap, const char *tag, ns3__Include **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__Include **)soap_malloc(soap, sizeof(ns3__Include *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__Include *)soap_instantiate_ns3__Include(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (ns3__Include **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__Include, sizeof(ns3__Include), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__SrbAuth(struct soap *soap, ns2__SrbAuth *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns2__SrbAuth))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__SrbAuth(struct soap *soap, ns2__SrbAuth *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons2__SrbAuth);
	if (soap_out_PointerTons2__SrbAuth(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__SrbAuth(struct soap *soap, const char *tag, int id, ns2__SrbAuth *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__SrbAuth);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns2__SrbAuth ** SOAP_FMAC4 soap_get_PointerTons2__SrbAuth(struct soap *soap, ns2__SrbAuth **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__SrbAuth(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 ns2__SrbAuth ** SOAP_FMAC4 soap_in_PointerTons2__SrbAuth(struct soap *soap, const char *tag, ns2__SrbAuth **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns2__SrbAuth **)soap_malloc(soap, sizeof(ns2__SrbAuth *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns2__SrbAuth *)soap_instantiate_ns2__SrbAuth(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (ns2__SrbAuth **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__SrbAuth, sizeof(ns2__SrbAuth), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrbAuth(struct soap *soap, ns1__SrbAuth *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__SrbAuth))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrbAuth(struct soap *soap, ns1__SrbAuth *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__SrbAuth);
	if (soap_out_PointerTons1__SrbAuth(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrbAuth(struct soap *soap, const char *tag, int id, ns1__SrbAuth *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__SrbAuth);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__SrbAuth ** SOAP_FMAC4 soap_get_PointerTons1__SrbAuth(struct soap *soap, ns1__SrbAuth **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__SrbAuth(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 ns1__SrbAuth ** SOAP_FMAC4 soap_in_PointerTons1__SrbAuth(struct soap *soap, const char *tag, ns1__SrbAuth **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__SrbAuth **)soap_malloc(soap, sizeof(ns1__SrbAuth *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__SrbAuth *)soap_instantiate_ns1__SrbAuth(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (ns1__SrbAuth **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__SrbAuth, sizeof(ns1__SrbAuth), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap *soap, unsigned char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap *soap, unsigned char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTounsignedByte);
	if (soap_out_PointerTounsignedByte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap *soap, const char *tag, int id, unsigned char *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_unsignedByte);
	if (id < 0)
		return soap->error;
	return soap_out_unsignedByte(soap, tag, id, *a, type);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap *soap, unsigned char **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTounsignedByte(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap *soap, const char *tag, unsigned char **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (unsigned char **)soap_malloc(soap, sizeof(unsigned char *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_unsignedByte(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (unsigned char **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_unsignedByte, sizeof(unsigned char), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__anyURI(struct soap *soap, char **a)
{	soap_default_string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anyURI(struct soap *soap, char *const*a)
{	soap_serialize_string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyURI(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__anyURI);
	if (soap_out_xsd__anyURI(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_xsd__anyURI);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__anyURI(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__anyURI(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__anyURI(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_xsd__anyURI, 1, -1, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap *soap, char **a)
{	soap_default_string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{	soap_serialize_string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, -1, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, -1, -1);
}

/* End of soapC.cpp */
