/* SrbStorageWS.h
   Generated by wsdl2h 1.2.9b from http://ws-lhdl.cineca.it:12000/wsdl/SrbList.wsdl http://ws-lhdl.cineca.it:12000/wsdl/SrbDownload.wsdl http://ws-lhdl.cineca.it:12000/wsdl/SrbUpload.wsdl and typemap.dat
   2007-08-24 10:26:52 GMT
   Copyright (C) 2001-2006 Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/* NOTE:

 - Compile this file with soapcpp2 to complete the code generation process.
 - Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control schema namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) to browse this file.
 - Use wsdl2h option -l to view the software license terms.

   DO NOT include this file directly into your project.
   Include only the soapcpp2-generated headers and source code files.
*/

//gsoapopt w

/******************************************************************************\
 *                                                                            *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "SrbList"
ns2 = "urn:SrbDownload"
ns3 = "http://www.w3.org/2004/08/xop/include"
ns4 = "http://www.w3.org/2004/11/xmlmime"
ns5 = "http://tempuri.org/ns.xsd"

*/

//gsoap ns1   schema namespace:	SrbList
//gsoap ns2   schema namespace:	urn:SrbDownload
//gsoap ns3   schema namespace:	http://www.w3.org/2004/08/xop/include
//gsoap ns4   schema namespace:	http://www.w3.org/2004/11/xmlmime
//gsoap ns5   schema namespace:	http://tempuri.org/ns.xsd
//gsoap ns1   schema form:	unqualified
//gsoap ns2   schema form:	unqualified
//gsoap ns3   schema form:	unqualified
//gsoap ns4   schema form:	unqualified
//gsoap ns5   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Schema Types                                                               *
 *                                                                            *
\******************************************************************************/


/// Primitive built-in type "xs:anyURI"
typedef char* xsd__anyURI;

/// Built-in type "xs:base64Binary".
class xsd__base64Binary
{	unsigned char *__ptr;
	int __size;
	char *id, *type, *options; /* NOTE: for DIME and MTOM XOP attachments only */
	struct soap *soap;
};

/// Built-in type "xs:hexBinary".
class xsd__hexBinary { unsigned char *__ptr; int __size; };


//  Forward declaration of class ns1__SrbAuth.
class ns1__SrbAuth;

//  Forward declaration of class _ns1__SrbList.
class _ns1__SrbList;

//  Forward declaration of class _ns1__SrbListResponse.
class _ns1__SrbListResponse;

//  Forward declaration of class ns2__SrbAuth.
class ns2__SrbAuth;

//  Forward declaration of class _ns2__SrbDownload.
class _ns2__SrbDownload;

//  Forward declaration of class _ns2__myData.
class _ns2__myData;

//  Forward declaration of class ns3__Include.
class ns3__Include;

//  Forward declaration of class ns4__base64Binary.
class ns4__base64Binary;

//  Forward declaration of class ns4__hexBinary.
class ns4__hexBinary;

//  Forward declaration of class ns5__SrbAuth.
class ns5__SrbAuth;

//  Forward declaration of class ns5__myData.
class ns5__myData;

//  Forward declaration of class _ns5__SrbUpload.
class _ns5__SrbUpload;

//  Forward declaration of class _ns5__fileInfo.
class _ns5__fileInfo;

/// "SrbList":SrbAuth is a complexType.
class ns1__SrbAuth
{ public:
/// Element host of type xs:string.
    char*                                host                           0;	///< Nullable pointer.
/// Element port of type xs:string.
    char*                                port                           0;	///< Nullable pointer.
/// Element pwd of type xs:string.
    char*                                pwd                            0;	///< Nullable pointer.
/// Element user of type xs:string.
    char*                                user                           0;	///< Nullable pointer.
/// Element domain of type xs:string.
    char*                                domain                         0;	///< Nullable pointer.
/// Element auth-scheme of type xs:string.
    char*                                auth_scheme                    0;	///< Nullable pointer.
/// Element server-dn of type xs:string.
    char*                                server_dn                      0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "SrbList":SrbList of complexType.

/// "SrbList":SrbList is a complexType.
class _ns1__SrbList
{ public:
/// Element srbAuth of type "SrbList":SrbAuth.
    ns1__SrbAuth*                        srbAuth                        0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "SrbList":SrbListResponse of complexType.

/// "SrbList":SrbListResponse is a complexType.
class _ns1__SrbListResponse
{ public:
/// Element filelist of type xs:string.
    char*                                filelist                       1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:SrbDownload":SrbAuth is a complexType.
class ns2__SrbAuth
{ public:
/// Element host of type xs:string.
    char*                                host                           0;	///< Nullable pointer.
/// Element port of type xs:string.
    char*                                port                           0;	///< Nullable pointer.
/// Element pwd of type xs:string.
    char*                                pwd                            0;	///< Nullable pointer.
/// Element user of type xs:string.
    char*                                user                           0;	///< Nullable pointer.
/// Element domain of type xs:string.
    char*                                domain                         0;	///< Nullable pointer.
/// Element auth-scheme of type xs:string.
    char*                                auth_scheme                    0;	///< Nullable pointer.
/// Element server-dn of type xs:string.
    char*                                server_dn                      0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:SrbDownload":SrbDownload of complexType.

/// "urn:SrbDownload":SrbDownload is a complexType.
class _ns2__SrbDownload
{ public:
/// Element srbAuth of type "urn:SrbDownload":SrbAuth.
    ns2__SrbAuth*                        srbAuth                        0;	///< Nullable pointer.
/// Element srbFileName of type xs:string.
    char*                                srbFileName                    0;	///< Nullable pointer.
/// Element srbPath of type xs:string.
    char*                                srbPath                        0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:SrbDownload":myData of complexType.

/// "urn:SrbDownload":myData is a complexType.
class _ns2__myData
{ public:
/// Element reference "http://www.w3.org/2004/08/xop/include":Include.
    ns3__Include*                        ns3__Include_                  1;	///< Required element.
/// Attribute reference "http://www.w3.org/2004/11/xmlmime":contentType.
   @char*                                ns4__contentType               0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.w3.org/2004/08/xop/include":Include is a complexType.
class ns3__Include
{ public:
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
///       Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d to use xsd__anyType DOM.
/// Size of the dynamic array of XML is 0..unbounded
    int                                  __size                        ;
    _XML                                *__any                         ;	///< Catch any element content in XML string.
/// Attribute href of type xs:anyURI.
   @xsd__anyURI                          href                           1;	///< Required attribute.
/// TODO: <anyAttribute namespace="##other">
///       Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
   @_XML                                 __anyAttribute                ;	///< Catch any attribute content in XML string.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://tempuri.org/ns.xsd":SrbAuth is a complexType.
class ns5__SrbAuth
{ public:
/// Element host of type xs:string.
    char*                                host                           0;	///< Nullable pointer.
/// Element port of type xs:string.
    char*                                port                           0;	///< Nullable pointer.
/// Element pwd of type xs:string.
    char*                                pwd                            0;	///< Nullable pointer.
/// Element user of type xs:string.
    char*                                user                           0;	///< Nullable pointer.
/// Element domain of type xs:string.
    char*                                domain                         0;	///< Nullable pointer.
/// Element auth-scheme of type xs:string.
    char*                                auth_scheme                    0;	///< Nullable pointer.
/// Element server-dn of type xs:string.
    char*                                server_dn                      0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://tempuri.org/ns.xsd":myData is a complexType.
class ns5__myData
{ public:
/// Element reference "http://www.w3.org/2004/08/xop/include":Include.
    ns3__Include*                        ns3__Include_                  1;	///< Required element.
/// Attribute reference "http://www.w3.org/2004/11/xmlmime":contentType.
   @char*                                ns4__contentType               0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "http://tempuri.org/ns.xsd":SrbUpload of complexType.

/// "http://tempuri.org/ns.xsd":SrbUpload is a complexType.
class _ns5__SrbUpload
{ public:
/// Element srbAuth of type "http://tempuri.org/ns.xsd":SrbAuth.
    ns5__SrbAuth*                        srbAuth                        0;	///< Nullable pointer.
/// Element fileData of type "http://tempuri.org/ns.xsd":myData.
    ns5__myData*                         fileData                       0;	///< Nullable pointer.
/// Element srbPath of type xs:string.
    char*                                srbPath                        0;	///< Nullable pointer.
/// Element fileName of type xs:string.
    char*                                fileName                       0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "http://tempuri.org/ns.xsd":fileInfo of complexType.

/// "http://tempuri.org/ns.xsd":fileInfo is a complexType.
class _ns5__fileInfo
{ public:
/// Element chksum of type xs:int.
    int                                  chksum                         1;	///< Required element.
/// Element uriFile of type xs:string.
    char*                                uriFile                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.w3.org/2004/11/xmlmime":base64Binary is a complexType with simpleContent.
class ns4__base64Binary
{ public:
/// __item wraps 'xs:base64Binary' simpleContent.
    xsd__base64Binary                    __item                        ;
/// Attribute reference "http://www.w3.org/2004/11/xmlmime":contentType.
   @char*                                contentType                    0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.w3.org/2004/11/xmlmime":hexBinary is a complexType with simpleContent.
class ns4__hexBinary
{ public:
/// __item wraps 'xs:hexBinary' simpleContent.
    xsd__hexBinary                       __item                        ;
/// Attribute reference "http://www.w3.org/2004/11/xmlmime":contentType.
   @char*                                contentType                    0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// Element "http://www.w3.org/2004/08/xop/include":Include of type "http://www.w3.org/2004/08/xop/include":Include.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Attribute "http://www.w3.org/2004/11/xmlmime":contentType of simpleType xs:string.
/// Note: use wsdl2h option -g to generate this global attribute declaration.

/// Attribute "http://www.w3.org/2004/11/xmlmime":expectedMediaType of simpleType xs:string.
/// Note: use wsdl2h option -g to generate this global attribute declaration.

/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns6  service name:	SrbList 
//gsoap ns6  service type:	SrbListPortType 
//gsoap ns6  service port:	http://localhost:80 
//gsoap ns6  service namespace:	http://localhost:80/SrbList.wsdl 
//gsoap ns6  service transport:	http://schemas.xmlsoap.org/soap/http 

//gsoap ns7  service name:	SrbDownload 
//gsoap ns7  service type:	SrbDownloadPortType 
//gsoap ns7  service port:	http://localhost:80 
//gsoap ns7  service namespace:	http://localhost:80/SrbDownload.wsdl 
//gsoap ns7  service transport:	http://schemas.xmlsoap.org/soap/http 

//gsoap ns8  service name:	SrbUpload 
//gsoap ns8  service type:	SrbUploadPortType 
//gsoap ns8  service port:	http://localhost:80 
//gsoap ns8  service namespace:	http://localhost:80/SrbUpload.wsdl 
//gsoap ns8  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Bindings
  - @ref SrbList
  - @ref SrbDownload
  - @ref SrbUpload

*/

/**

@page SrbList Binding "SrbList"

@section SrbList_service Service Documentation "SrbList"
gSOAP 2.7.9b generated service definition

@section SrbList_operations Operations of Binding  "SrbList"
  - @ref __ns6__SrbList

@section SrbList_ports Endpoints of Binding  "SrbList"
  - http://localhost:80

*/

/**

@page SrbDownload Binding "SrbDownload"

@section SrbDownload_service Service Documentation "SrbDownload"
gSOAP 2.7.9b generated service definition

@section SrbDownload_operations Operations of Binding  "SrbDownload"
  - @ref __ns7__SrbDownload

@section SrbDownload_ports Endpoints of Binding  "SrbDownload"
  - http://localhost:80

*/

/**

@page SrbUpload Binding "SrbUpload"

@section SrbUpload_service Service Documentation "SrbUpload"
gSOAP 2.7.9b generated service definition

@section SrbUpload_operations Operations of Binding  "SrbUpload"
  - @ref __ns8__SrbUpload

@section SrbUpload_ports Endpoints of Binding  "SrbUpload"
  - http://localhost:80

*/

/******************************************************************************\
 *                                                                            *
 * SrbList                                                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * __ns6__SrbList                                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns6__SrbList" of service binding "SrbList"

/**

Operation details:

Service definition of function ns__SrbList
  - SOAP document/literal style

C stub function (defined in soapClient.c[pp] after running soapcpp2):
@code
  int soap_call___ns6__SrbList(struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__SrbList*                      ns1__SrbList,
    // response parameters:
    _ns1__SrbListResponse*              ns1__SrbListResponse
  );
@endcode

C++ proxy class (defined in soapSrbListProxy.h):
  class SrbList;

*/

//gsoap ns6  service method-style:	SrbList document
//gsoap ns6  service method-encoding:	SrbList literal
//gsoap ns6  service method-action:	SrbList ""
int __ns6__SrbList(
    _ns1__SrbList*                      ns1__SrbList,	///< Request parameter
    _ns1__SrbListResponse*              ns1__SrbListResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * SrbDownload                                                                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * __ns7__SrbDownload                                                         *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "__ns7__SrbDownloadResponse" of service binding "SrbDownload" operation "__ns7__SrbDownload"
struct __ns7__SrbDownloadResponse
{
    _ns2__myData*                       ns2__myData;
};

/// Operation "__ns7__SrbDownload" of service binding "SrbDownload"

/**

Operation details:

Service definition of function ns__SrbDownload
  - SOAP document/literal style
  - Request message has MIME multipart/related attachments:
    -# MIME attachment with SOAP Body and mandatory header part(s):
    -# MIME attachment 2:
       - part="attachments
" type="* / *
"
  - Response message has MIME multipart/related attachments
    -# MIME attachment with SOAP Body and mandatory header part(s):
    -# MIME attachment 2:
       - part="attachments
" type="* / *
"

C stub function (defined in soapClient.c[pp] after running soapcpp2):
@code
  int soap_call___ns7__SrbDownload(struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns2__SrbDownload*                  ns2__SrbDownload,
    // response parameters:
    struct __ns7__SrbDownloadResponse&
  );
@endcode

C++ proxy class (defined in soapSrbDownloadProxy.h):
  class SrbDownload;

*/

//gsoap ns7  service method-style:	SrbDownload document
//gsoap ns7  service method-encoding:	SrbDownload literal
//gsoap ns7  service method-input-mime-type:	SrbDownload */*
//gsoap ns7  service method-output-mime-type:	SrbDownload */*
int __ns7__SrbDownload(
    _ns2__SrbDownload*                  ns2__SrbDownload,	///< Request parameter
    struct __ns7__SrbDownloadResponse  &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * SrbUpload                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * __ns8__SrbUpload                                                           *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "__ns8__SrbUploadResponse" of service binding "SrbUpload" operation "__ns8__SrbUpload"
struct __ns8__SrbUploadResponse
{
    _ns5__fileInfo*                     ns5__fileInfo;
};

/// Operation "__ns8__SrbUpload" of service binding "SrbUpload"

/**

Operation details:

Service definition of function ns__SrbUpload
  - SOAP document/literal style
  - Request message has MIME multipart/related attachments:
    -# MIME attachment with SOAP Body and mandatory header part(s):
    -# MIME attachment 2:
       - part="attachments
" type="* / *
"
  - Response message has MIME multipart/related attachments
    -# MIME attachment with SOAP Body and mandatory header part(s):
    -# MIME attachment 2:
       - part="attachments
" type="* / *
"

C stub function (defined in soapClient.c[pp] after running soapcpp2):
@code
  int soap_call___ns8__SrbUpload(struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns5__SrbUpload*                    ns5__SrbUpload,
    // response parameters:
    struct __ns8__SrbUploadResponse&
  );
@endcode

C++ proxy class (defined in soapSrbUploadProxy.h):
  class SrbUpload;

*/

//gsoap ns8  service method-style:	SrbUpload document
//gsoap ns8  service method-encoding:	SrbUpload literal
//gsoap ns8  service method-input-mime-type:	SrbUpload */*
//gsoap ns8  service method-output-mime-type:	SrbUpload */*
int __ns8__SrbUpload(
    _ns5__SrbUpload*                    ns5__SrbUpload,	///< Request parameter
    struct __ns8__SrbUploadResponse    &	///< Response struct parameter
);

/* End of SrbStorageWS.h */
