/*=========================================================================
  Program:   Multimod Application Framework
  Module:    $RCSfile: mmgDialog.cpp,v $
  Language:  C++
  Date:      $Date: 2005-04-14 13:44:57 $
  Version:   $Revision: 1.3 $
  Authors:   Silvano Imboden
==========================================================================
  Copyright (c) 2002/2004
  CINECA - Interuniversity Consortium (www.cineca.it) 
=========================================================================*/


#include "mafDefines.h" 
//----------------------------------------------------------------------------
// NOTE: Every CPP file in the MAF must include "mafDefines.h" as first.
// This force to include Window,wxWidgets and VTK exactly in this order.
// Failing in doing this will result in a run-time error saying:
// "Failure#0: The value of ESP was not properly saved across a function call"
//----------------------------------------------------------------------------

#include "mmgDialog.h"
#include "wx/busyinfo.h"
#include "mafDecl.h"
//----------------------------------------------------------------------------
// Event Table:
//----------------------------------------------------------------------------
BEGIN_EVENT_TABLE(mmgDialog, wxDialog)
	EVT_CLOSE(mmgDialog::OnCloseWindow)
  EVT_BUTTON(wxID_OK, mmgDialog::OnOK)
  EVT_BUTTON(wxID_CANCEL, mmgDialog::OnCancel)
  EVT_BUTTON(wxOK, mmgDialog::OnOK)
  EVT_BUTTON(wxCANCEL, mmgDialog::OnCancel)
END_EVENT_TABLE()

//----------------------------------------------------------------------------
mmgDialog::mmgDialog(const wxString& title,long style)
: wxDialog()
//----------------------------------------------------------------------------
{
  m_Listener = NULL;
  
  long s = wxCAPTION;
  if(style & mafRESIZABLE) 
    s |= wxRESIZE_BORDER;
  if(style & mafCLOSEWINDOW) 
    s |= wxSYSTEM_MENU;

  Create(mafGetFrame(),-1,title,wxDefaultPosition,wxDefaultSize,s); 

  m_dialog_sizer  =  new wxBoxSizer( wxVERTICAL );
  m_sizer         =  new wxBoxSizer( wxVERTICAL );
  m_buttons_sizer =  new wxBoxSizer( wxHORIZONTAL );
  m_dialog_sizer->Add(m_sizer,1,wxEXPAND);
  m_dialog_sizer->Add(m_buttons_sizer,0,wxCENTRE);

  m_ok_button    = NULL;
  m_cancel_button = NULL;
  m_close_button  = NULL;

  if( style & mafOK )
  {
    m_ok_button = new wxButton(this,wxID_OK,"ok");
    m_buttons_sizer->Add(m_ok_button,0);
  }
  if( style & mafCANCEL )
  {
    m_cancel_button = new wxButton(this,wxID_CANCEL,"cancel");
    m_buttons_sizer->Add(m_cancel_button ,0);
  }
  if( (style & mafCLOSE) && !(style & mafOK) && !(style & mafCANCEL) )
  {
    m_close_button = new wxButton(this,wxID_OK,"close");
    m_buttons_sizer->Add(m_close_button ,0);
  }
}
//----------------------------------------------------------------------------
mmgDialog::~mmgDialog( ) 
//----------------------------------------------------------------------------
{
}
//----------------------------------------------------------------------------
int mmgDialog::ShowModal()
//----------------------------------------------------------------------------
{
  m_dialog_sizer->SetMinSize(100,50); // looks ugly when it is empty
  //this->SetAutoLayout( TRUE );
  this->SetSizer( m_dialog_sizer );
  //m_dialog_sizer->Fit(this); //called by SetSizeHints
  m_dialog_sizer->SetSizeHints(this);
  return wxDialog::ShowModal();
}
//--------------------------------------------------------------------------------
void mmgDialog::OnEvent(mafEvent& e)
//--------------------------------------------------------------------------------
{
  // POURPOSE:
  // allow wxOK and wxCANCEL generated by a mmgGUI to be considered 
  // like the corresponding events generated by normal buttons.
  switch(e.GetId())
  {
  case wxID_OK:
  case wxOK:
    {
    wxCommandEvent c(0, wxID_OK);
    OnOK(c);
    }
  break;
  case wxID_CANCEL:
  case wxCANCEL:
    {
      wxCommandEvent c(0, wxID_CANCEL);
      OnOK(c);
    }
  break;
  default:
    mafEventMacro(e);
  }
}
//----------------------------------------------------------------------------
void mmgDialog::OnCloseWindow(wxCloseEvent& event)
//----------------------------------------------------------------------------
{
  wxDialog::OnCloseWindow(event);
}
//----------------------------------------------------------------------------
void mmgDialog::OnOK(wxCommandEvent& event)
//----------------------------------------------------------------------------
{
  wxDialog::OnOK(event);
}
//----------------------------------------------------------------------------
void mmgDialog::OnCancel(wxCommandEvent& event)
//----------------------------------------------------------------------------
{
  wxDialog::OnCancel(event);
}

